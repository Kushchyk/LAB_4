
LAB_4_Kushchyk_Patrun_Bukaliuk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004764  08004764  00005764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004804  08004804  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004804  08004804  00005804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800480c  0800480c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800480c  0800480c  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004814  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00000230  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a846  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018cc  00000000  00000000  000108e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  000121b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  00012ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212c9  00000000  00000000  0001336f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2d2  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d18  00000000  00000000  0004190a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108622  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b4  00000000  00000000  00108668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0010b71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800474c 	.word	0x0800474c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800474c 	.word	0x0800474c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 200);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	23c8      	movs	r3, #200	@ 0xc8
 800056c:	2201      	movs	r2, #1
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <__io_putchar+0x20>)
 8000570:	f002 fe00 	bl	8003174 <HAL_UART_Transmit>
	return ch;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000dc 	.word	0x200000dc

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fd9c 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f892 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f952 	bl	8000838 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000594:	f000 f926 	bl	80007e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000598:	f000 f8f6 	bl	8000788 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LSM9DS1_Init();
 800059c:	f000 fa14 	bl	80009c8 <LSM9DS1_Init>


      while (1) {
          // Зчитування даних
          LSM9DS1_ReadData(acc, gyro, mag);
 80005a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000694 <main+0x110>)
 80005a2:	493d      	ldr	r1, [pc, #244]	@ (8000698 <main+0x114>)
 80005a4:	483d      	ldr	r0, [pc, #244]	@ (800069c <main+0x118>)
 80005a6:	f000 fa22 	bl	80009ee <LSM9DS1_ReadData>


//          HAL_Delay(1000);


	  ClearLEDs();
 80005aa:	f000 fb99 	bl	8000ce0 <ClearLEDs>

	  switch(mode)
 80005ae:	4b3c      	ldr	r3, [pc, #240]	@ (80006a0 <main+0x11c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d869      	bhi.n	800068a <main+0x106>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <main+0x38>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005d1 	.word	0x080005d1
 80005c0:	080005ef 	.word	0x080005ef
 80005c4:	0800060d 	.word	0x0800060d
 80005c8:	0800062b 	.word	0x0800062b
 80005cc:	08000681 	.word	0x08000681
	  {
	  	  case 0:
	  		 printf("ACC: X:%d, Y:%d, Z:%d\r\n", acc[0], acc[1], acc[2]);
 80005d0:	4b32      	ldr	r3, [pc, #200]	@ (800069c <main+0x118>)
 80005d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4b30      	ldr	r3, [pc, #192]	@ (800069c <main+0x118>)
 80005da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <main+0x118>)
 80005e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e6:	482f      	ldr	r0, [pc, #188]	@ (80006a4 <main+0x120>)
 80005e8:	f003 fa42 	bl	8003a70 <iprintf>
//	  		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	  		 break;
 80005ec:	e04e      	b.n	800068c <main+0x108>
	  	  case 1:
	  		  printf("GYRO: X:%d, Y:%d, Z:%d\r\n", gyro[0], gyro[1], gyro[2]);
 80005ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <main+0x114>)
 80005f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <main+0x114>)
 80005f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <main+0x114>)
 8000600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000604:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <main+0x124>)
 8000606:	f003 fa33 	bl	8003a70 <iprintf>
//	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	  		  break;
 800060a:	e03f      	b.n	800068c <main+0x108>
	  	  case 2:
	  		  printf("MAG: X:%d, Y:%d, Z:%d\r\n", mag[0], mag[1], mag[2]);
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <main+0x110>)
 800060e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000612:	4619      	mov	r1, r3
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <main+0x110>)
 8000616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800061a:	461a      	mov	r2, r3
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <main+0x110>)
 800061e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000622:	4822      	ldr	r0, [pc, #136]	@ (80006ac <main+0x128>)
 8000624:	f003 fa24 	bl	8003a70 <iprintf>
//	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	  		  break;
 8000628:	e030      	b.n	800068c <main+0x108>
	  	  case 3:
          	  printf("ACC: X:%d, Y:%d, Z:%d\r\n", acc[0], acc[1], acc[2]);
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <main+0x118>)
 800062c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000630:	4619      	mov	r1, r3
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <main+0x118>)
 8000634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000638:	461a      	mov	r2, r3
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <main+0x118>)
 800063c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000640:	4818      	ldr	r0, [pc, #96]	@ (80006a4 <main+0x120>)
 8000642:	f003 fa15 	bl	8003a70 <iprintf>
          	  printf("GYRO: X:%d, Y:%d, Z:%d\r\n", gyro[0], gyro[1], gyro[2]);
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <main+0x114>)
 8000648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064c:	4619      	mov	r1, r3
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <main+0x114>)
 8000650:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000654:	461a      	mov	r2, r3
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <main+0x114>)
 8000658:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800065c:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <main+0x124>)
 800065e:	f003 fa07 	bl	8003a70 <iprintf>
			  printf("MAG: X:%d, Y:%d, Z:%d\r\n", mag[0], mag[1], mag[2]);
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <main+0x110>)
 8000664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000668:	4619      	mov	r1, r3
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <main+0x110>)
 800066c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000670:	461a      	mov	r2, r3
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <main+0x110>)
 8000674:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <main+0x128>)
 800067a:	f003 f9f9 	bl	8003a70 <iprintf>

//			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
			  break;
 800067e:	e005      	b.n	800068c <main+0x108>
	  	  case 4:
	  		printf("LED\n\r");
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <main+0x12c>)
 8000682:	f003 f9f5 	bl	8003a70 <iprintf>
	  		//printf("ACC: X:%d, Y:%d, Z:%d\r\n", acc[0], acc[1], acc[2]);
	  		UpdateLEDs();
 8000686:	f000 fa5b 	bl	8000b40 <UpdateLEDs>
	  	  default:
	  		  break;
 800068a:	bf00      	nop
	  }
	  HAL_Delay(200);
 800068c:	20c8      	movs	r0, #200	@ 0xc8
 800068e:	f000 fd8b 	bl	80011a8 <HAL_Delay>
      while (1) {
 8000692:	e785      	b.n	80005a0 <main+0x1c>
 8000694:	20000140 	.word	0x20000140
 8000698:	20000138 	.word	0x20000138
 800069c:	20000130 	.word	0x20000130
 80006a0:	2000012c 	.word	0x2000012c
 80006a4:	08004764 	.word	0x08004764
 80006a8:	0800477c 	.word	0x0800477c
 80006ac:	08004798 	.word	0x08004798
 80006b0:	080047b0 	.word	0x080047b0

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fa29 	bl	8003b1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f832 	bl	80027a4 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000746:	f000 fae9 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fa93 	bl	8002c94 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000774:	f000 fad2 	bl	8000d1c <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	@ 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x50>)
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <MX_I2C1_Init+0x54>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C1_Init+0x50>)
 8000794:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_I2C1_Init+0x58>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007c6:	f000 fff3 	bl	80017b0 <HAL_I2C_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d0:	f000 faa4 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000088 	.word	0x20000088
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_USART3_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART3_UART_Init+0x4c>)
 800081c:	f002 fc5a 	bl	80030d4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 fa79 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000dc 	.word	0x200000dc
 8000834:	40004800 	.word	0x40004800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b39      	ldr	r3, [pc, #228]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a38      	ldr	r2, [pc, #224]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a31      	ldr	r2, [pc, #196]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <MX_GPIO_Init+0x100>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_GPIO_Init+0x100>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_GPIO_Init+0x100>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a23      	ldr	r2, [pc, #140]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_GPIO_Init+0x100>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008e0:	4816      	ldr	r0, [pc, #88]	@ (800093c <MX_GPIO_Init+0x104>)
 80008e2:	f000 ff33 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008ea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_GPIO_Init+0x108>)
 80008fc:	f000 fd8a 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000900:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4808      	ldr	r0, [pc, #32]	@ (800093c <MX_GPIO_Init+0x104>)
 800091a:	f000 fd7b 	bl	8001414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2006      	movs	r0, #6
 8000924:	f000 fd3f 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000928:	2006      	movs	r0, #6
 800092a:	f000 fd58 	bl	80013de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	@ 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40020000 	.word	0x40020000

08000944 <I2C_Write>:

/* USER CODE BEGIN 4 */

// Функція для запису в регістр
void I2C_Write(uint16_t devAddr, uint8_t regAddr, uint8_t data) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	717b      	strb	r3, [r7, #5]
 8000952:	4613      	mov	r3, r2
 8000954:	713b      	strb	r3, [r7, #4]
    uint8_t temp[2] = {regAddr, data};
 8000956:	797b      	ldrb	r3, [r7, #5]
 8000958:	733b      	strb	r3, [r7, #12]
 800095a:	793b      	ldrb	r3, [r7, #4]
 800095c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, devAddr, temp, 2, HAL_MAX_DELAY);
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	88f9      	ldrh	r1, [r7, #6]
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	4803      	ldr	r0, [pc, #12]	@ (800097c <I2C_Write+0x38>)
 800096e:	f001 f863 	bl	8001a38 <HAL_I2C_Master_Transmit>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000088 	.word	0x20000088

08000980 <I2C_Read>:

// Функція для читання з регістрів
void I2C_Read(uint16_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t size) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	60ba      	str	r2, [r7, #8]
 8000988:	461a      	mov	r2, r3
 800098a:	4603      	mov	r3, r0
 800098c:	81fb      	strh	r3, [r7, #14]
 800098e:	460b      	mov	r3, r1
 8000990:	737b      	strb	r3, [r7, #13]
 8000992:	4613      	mov	r3, r2
 8000994:	80fb      	strh	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, devAddr, &regAddr, 1, HAL_MAX_DELAY);
 8000996:	f107 020d 	add.w	r2, r7, #13
 800099a:	89f9      	ldrh	r1, [r7, #14]
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <I2C_Read+0x44>)
 80009a6:	f001 f847 	bl	8001a38 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, devAddr, data, size, HAL_MAX_DELAY);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	89f9      	ldrh	r1, [r7, #14]
 80009ae:	f04f 32ff 	mov.w	r2, #4294967295
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <I2C_Read+0x44>)
 80009b8:	f001 f93c 	bl	8001c34 <HAL_I2C_Master_Receive>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000088 	.word	0x20000088

080009c8 <LSM9DS1_Init>:

// Функція для ініціалізації LSM9DS1
void LSM9DS1_Init() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    // Ініціалізація гіроскопа
    I2C_Write(ACC_GYRO_ADDR, 0x10, 0xC0);  // CTRL_REG1_G: 238Hz, 2000dps
 80009cc:	22c0      	movs	r2, #192	@ 0xc0
 80009ce:	2110      	movs	r1, #16
 80009d0:	20d6      	movs	r0, #214	@ 0xd6
 80009d2:	f7ff ffb7 	bl	8000944 <I2C_Write>

    // Ініціалізація акселерометра
    I2C_Write(ACC_GYRO_ADDR, 0x20, 0xC0);  // CTRL_REG6_XL: 238Hz, ±8g
 80009d6:	22c0      	movs	r2, #192	@ 0xc0
 80009d8:	2120      	movs	r1, #32
 80009da:	20d6      	movs	r0, #214	@ 0xd6
 80009dc:	f7ff ffb2 	bl	8000944 <I2C_Write>

    // Ініціалізація магнетометра
    I2C_Write(MAG_ADDR, 0x20, 0xFC);      // CTRL_REG1_M: Ultra-high performance
 80009e0:	22fc      	movs	r2, #252	@ 0xfc
 80009e2:	2120      	movs	r1, #32
 80009e4:	203c      	movs	r0, #60	@ 0x3c
 80009e6:	f7ff ffad 	bl	8000944 <I2C_Write>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}

080009ee <LSM9DS1_ReadData>:

// Зчитування даних акселерометра, гіроскопа і магнетометра
void LSM9DS1_ReadData(int16_t *acc, int16_t *gyro, int16_t *mag) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];

    // Зчитування акселерометра
    I2C_Read(ACC_GYRO_ADDR, OUT_X_L_XL, buffer, 6);
 80009fa:	f107 0210 	add.w	r2, r7, #16
 80009fe:	2306      	movs	r3, #6
 8000a00:	2128      	movs	r1, #40	@ 0x28
 8000a02:	20d6      	movs	r0, #214	@ 0xd6
 8000a04:	f7ff ffbc 	bl	8000980 <I2C_Read>
    acc[0] = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000a08:	7c3b      	ldrb	r3, [r7, #16]
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	7c7b      	ldrb	r3, [r7, #17]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	801a      	strh	r2, [r3, #0]
    acc[1] = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000a1a:	7cbb      	ldrb	r3, [r7, #18]
 8000a1c:	b219      	sxth	r1, r3
 8000a1e:	7cfb      	ldrb	r3, [r7, #19]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3302      	adds	r3, #2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	b212      	sxth	r2, r2
 8000a2c:	801a      	strh	r2, [r3, #0]
    acc[2] = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000a2e:	7d3b      	ldrb	r3, [r7, #20]
 8000a30:	b219      	sxth	r1, r3
 8000a32:	7d7b      	ldrb	r3, [r7, #21]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	b212      	sxth	r2, r2
 8000a40:	801a      	strh	r2, [r3, #0]

    // Зчитування гіроскопа
    I2C_Read(ACC_GYRO_ADDR, OUT_X_L_G, buffer, 6);
 8000a42:	f107 0210 	add.w	r2, r7, #16
 8000a46:	2306      	movs	r3, #6
 8000a48:	2118      	movs	r1, #24
 8000a4a:	20d6      	movs	r0, #214	@ 0xd6
 8000a4c:	f7ff ff98 	bl	8000980 <I2C_Read>
    gyro[0] = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000a50:	7c3b      	ldrb	r3, [r7, #16]
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	7c7b      	ldrb	r3, [r7, #17]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	801a      	strh	r2, [r3, #0]
    gyro[1] = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000a62:	7cbb      	ldrb	r3, [r7, #18]
 8000a64:	b219      	sxth	r1, r3
 8000a66:	7cfb      	ldrb	r3, [r7, #19]
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	430a      	orrs	r2, r1
 8000a72:	b212      	sxth	r2, r2
 8000a74:	801a      	strh	r2, [r3, #0]
    gyro[2] = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000a76:	7d3b      	ldrb	r3, [r7, #20]
 8000a78:	b219      	sxth	r1, r3
 8000a7a:	7d7b      	ldrb	r3, [r7, #21]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3304      	adds	r3, #4
 8000a84:	430a      	orrs	r2, r1
 8000a86:	b212      	sxth	r2, r2
 8000a88:	801a      	strh	r2, [r3, #0]

    // Зчитування магнетометра
    I2C_Read(MAG_ADDR, OUT_X_L_M, buffer, 6);
 8000a8a:	f107 0210 	add.w	r2, r7, #16
 8000a8e:	2306      	movs	r3, #6
 8000a90:	2128      	movs	r1, #40	@ 0x28
 8000a92:	203c      	movs	r0, #60	@ 0x3c
 8000a94:	f7ff ff74 	bl	8000980 <I2C_Read>
    mag[0] = (int16_t)(buffer[0] | (buffer[1] << 8));
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	7c7b      	ldrb	r3, [r7, #17]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	801a      	strh	r2, [r3, #0]
    mag[1] = (int16_t)(buffer[2] | (buffer[3] << 8));
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	b219      	sxth	r1, r3
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	b212      	sxth	r2, r2
 8000abc:	801a      	strh	r2, [r3, #0]
    mag[2] = (int16_t)(buffer[4] | (buffer[5] << 8));
 8000abe:	7d3b      	ldrb	r3, [r7, #20]
 8000ac0:	b219      	sxth	r1, r3
 8000ac2:	7d7b      	ldrb	r3, [r7, #21]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3304      	adds	r3, #4
 8000acc:	430a      	orrs	r2, r1
 8000ace:	b212      	sxth	r2, r2
 8000ad0:	801a      	strh	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_EXTI_Callback>:
// Вивід даних через UART



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	currentClick = HAL_GetTick();
 8000ae6:	f000 fb53 	bl	8001190 <HAL_GetTick>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x54>)
 8000aee:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_0 && (currentClick - prevClick > 200))
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d117      	bne.n	8000b26 <HAL_GPIO_EXTI_Callback+0x4a>
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x54>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x58>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b02:	d910      	bls.n	8000b26 <HAL_GPIO_EXTI_Callback+0x4a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		 */

		prevClick = currentClick;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b0a:	6013      	str	r3, [r2, #0]
		mode = (mode + 1) % MAX_NUMBER_MODE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b1a:	fb01 f202 	mul.w	r2, r1, r2
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000b24:	701a      	strb	r2, [r3, #0]
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000124 	.word	0x20000124
 8000b34:	20000128 	.word	0x20000128
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	20000000 	.word	0x20000000

08000b40 <UpdateLEDs>:

void UpdateLEDs() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    if (acc[0] > LIMIT && acc[1] > LIMIT) {
 8000b44:	4b63      	ldr	r3, [pc, #396]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000b46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b4a:	4b63      	ldr	r3, [pc, #396]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dd20      	ble.n	8000b96 <UpdateLEDs+0x56>
 8000b54:	4b5f      	ldr	r3, [pc, #380]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000b56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dd18      	ble.n	8000b96 <UpdateLEDs+0x56>
        HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6a:	485c      	ldr	r0, [pc, #368]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000b6c:	f000 fdee 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b76:	4859      	ldr	r0, [pc, #356]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000b78:	f000 fde8 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b82:	4856      	ldr	r0, [pc, #344]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000b84:	f000 fde2 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b8e:	4853      	ldr	r0, [pc, #332]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000b90:	f000 fddc 	bl	800174c <HAL_GPIO_WritePin>
 8000b94:	e09b      	b.n	8000cce <UpdateLEDs+0x18e>
    } else if (acc[0] < -LIMIT && acc[1] < -LIMIT) {
 8000b96:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	da22      	bge.n	8000bf0 <UpdateLEDs+0xb0>
 8000baa:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000bac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b49      	ldr	r3, [pc, #292]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb8:	425b      	negs	r3, r3
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	da18      	bge.n	8000bf0 <UpdateLEDs+0xb0>
        HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc4:	4845      	ldr	r0, [pc, #276]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000bc6:	f000 fdc1 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd0:	4842      	ldr	r0, [pc, #264]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000bd2:	f000 fdbb 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bdc:	483f      	ldr	r0, [pc, #252]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000bde:	f000 fdb5 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be8:	483c      	ldr	r0, [pc, #240]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000bea:	f000 fdaf 	bl	800174c <HAL_GPIO_WritePin>
 8000bee:	e06e      	b.n	8000cce <UpdateLEDs+0x18e>
    }else if(acc[0] < -LIMIT && acc[1] > LIMIT) {
 8000bf0:	4b38      	ldr	r3, [pc, #224]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfe:	425b      	negs	r3, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	da20      	bge.n	8000c46 <UpdateLEDs+0x106>
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000c06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000c0a:	4b33      	ldr	r3, [pc, #204]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dd18      	ble.n	8000c46 <UpdateLEDs+0x106>
    	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1a:	4830      	ldr	r0, [pc, #192]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c1c:	f000 fd96 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	482d      	ldr	r0, [pc, #180]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c28:	f000 fd90 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c32:	482a      	ldr	r0, [pc, #168]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c34:	f000 fd8a 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3e:	4827      	ldr	r0, [pc, #156]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c40:	f000 fd84 	bl	800174c <HAL_GPIO_WritePin>
 8000c44:	e043      	b.n	8000cce <UpdateLEDs+0x18e>
    }else if(acc[0] > LIMIT && acc[1] < -LIMIT) {
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dd22      	ble.n	8000c9c <UpdateLEDs+0x15c>
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <UpdateLEDs+0x194>)
 8000c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <UpdateLEDs+0x198>)
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	425b      	negs	r3, r3
 8000c66:	429a      	cmp	r2, r3
 8000c68:	da18      	bge.n	8000c9c <UpdateLEDs+0x15c>
    	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c70:	481a      	ldr	r0, [pc, #104]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c72:	f000 fd6b 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c7c:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c7e:	f000 fd65 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c88:	4814      	ldr	r0, [pc, #80]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c8a:	f000 fd5f 	bl	800174c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000c96:	f000 fd59 	bl	800174c <HAL_GPIO_WritePin>
 8000c9a:	e018      	b.n	8000cce <UpdateLEDs+0x18e>
    }
    else {
        HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000ca4:	f000 fd52 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cae:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000cb0:	f000 fd4c 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cba:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000cbc:	f000 fd46 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <UpdateLEDs+0x19c>)
 8000cc8:	f000 fd40 	bl	800174c <HAL_GPIO_WritePin>
    }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000130 	.word	0x20000130
 8000cd8:	20000002 	.word	0x20000002
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <ClearLEDs>:

void ClearLEDs() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_UP_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <ClearLEDs+0x38>)
 8000cec:	f000 fd2e 	bl	800174c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_DOWN_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <ClearLEDs+0x38>)
 8000cf8:	f000 fd28 	bl	800174c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <ClearLEDs+0x38>)
 8000d04:	f000 fd22 	bl	800174c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d0e:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <ClearLEDs+0x38>)
 8000d10:	f000 fd1c 	bl	800174c <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <Error_Handler+0x8>

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <HAL_I2C_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12c      	bne.n	8000df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000db6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <HAL_I2C_MspInit+0x8c>)
 8000dd4:	f000 fb1e 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_I2C_MspInit+0x88>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	@ 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_UART_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12c      	bne.n	8000e84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e74:	2307      	movs	r3, #7
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e80:	f000 fac8 	bl	8001414 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020c00 	.word	0x40020c00

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f93b 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fc40 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e00a      	b.n	8000f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f16:	f3af 8000 	nop.w
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	b2ca      	uxtb	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf0      	blt.n	8000f16 <_read+0x12>
  }

  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e009      	b.n	8000f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fb01 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf1      	blt.n	8000f50 <_write+0x12>
  }
  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_close>:

int _close(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f002 fdd2 	bl	8003bb8 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000148 	.word	0x20000148
 8001048:	200002a0 	.word	0x200002a0

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f002 fd91 	bl	8003bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa6f 	bl	8000584 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010b4:	08004814 	.word	0x08004814
  ldr r2, =_sbss
 80010b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010bc:	2000029c 	.word	0x2000029c

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f94f 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe16 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f967 	bl	80013fa <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f92f 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000004 	.word	0x20000004
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c
 800118c:	2000014c 	.word	0x2000014c

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000014c 	.word	0x2000014c

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff ffee 	bl	8001190 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffde 	bl	8001190 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	@ (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e16b      	b.n	8001708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 815a 	bne.w	8001702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	2b02      	cmp	r3, #2
 8001464:	d130      	bne.n	80014c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 0201 	and.w	r2, r3, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d017      	beq.n	8001504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d123      	bne.n	8001558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80b4 	beq.w	8001702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001720 <HAL_GPIO_Init+0x30c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001724 <HAL_GPIO_Init+0x310>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	@ (8001728 <HAL_GPIO_Init+0x314>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02b      	beq.n	800163a <HAL_GPIO_Init+0x226>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a51      	ldr	r2, [pc, #324]	@ (800172c <HAL_GPIO_Init+0x318>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x222>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <HAL_GPIO_Init+0x31c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x21e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001734 <HAL_GPIO_Init+0x320>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x21a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001738 <HAL_GPIO_Init+0x324>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x216>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <HAL_GPIO_Init+0x328>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x212>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4c      	ldr	r2, [pc, #304]	@ (8001740 <HAL_GPIO_Init+0x32c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x20e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_GPIO_Init+0x330>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x20a>
 800161a:	2307      	movs	r3, #7
 800161c:	e00e      	b.n	800163c <HAL_GPIO_Init+0x228>
 800161e:	2308      	movs	r3, #8
 8001620:	e00c      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001622:	2306      	movs	r3, #6
 8001624:	e00a      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001626:	2305      	movs	r3, #5
 8001628:	e008      	b.n	800163c <HAL_GPIO_Init+0x228>
 800162a:	2304      	movs	r3, #4
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x228>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x228>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x228>
 800163a:	2300      	movs	r3, #0
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800164c:	4935      	ldr	r1, [pc, #212]	@ (8001724 <HAL_GPIO_Init+0x310>)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_GPIO_Init+0x334>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167e:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <HAL_GPIO_Init+0x334>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001684:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_GPIO_Init+0x334>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a8:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016fc:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <HAL_GPIO_Init+0x334>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3301      	adds	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b0f      	cmp	r3, #15
 800170c:	f67f ae90 	bls.w	8001430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40013800 	.word	0x40013800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40021400 	.word	0x40021400
 8001740:	40021800 	.word	0x40021800
 8001744:	40021c00 	.word	0x40021c00
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f99c 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e12b      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff face 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	@ 0x24
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001814:	f001 fc36 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a81      	ldr	r2, [pc, #516]	@ (8001a24 <HAL_I2C_Init+0x274>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d807      	bhi.n	8001834 <HAL_I2C_Init+0x84>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a80      	ldr	r2, [pc, #512]	@ (8001a28 <HAL_I2C_Init+0x278>)
 8001828:	4293      	cmp	r3, r2
 800182a:	bf94      	ite	ls
 800182c:	2301      	movls	r3, #1
 800182e:	2300      	movhi	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e006      	b.n	8001842 <HAL_I2C_Init+0x92>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a7d      	ldr	r2, [pc, #500]	@ (8001a2c <HAL_I2C_Init+0x27c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0e7      	b.n	8001a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a78      	ldr	r2, [pc, #480]	@ (8001a30 <HAL_I2C_Init+0x280>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a6a      	ldr	r2, [pc, #424]	@ (8001a24 <HAL_I2C_Init+0x274>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d802      	bhi.n	8001884 <HAL_I2C_Init+0xd4>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	e009      	b.n	8001898 <HAL_I2C_Init+0xe8>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a69      	ldr	r2, [pc, #420]	@ (8001a34 <HAL_I2C_Init+0x284>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	495c      	ldr	r1, [pc, #368]	@ (8001a24 <HAL_I2C_Init+0x274>)
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d819      	bhi.n	80018ec <HAL_I2C_Init+0x13c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e59      	subs	r1, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c6:	1c59      	adds	r1, r3, #1
 80018c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018cc:	400b      	ands	r3, r1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_I2C_Init+0x138>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e59      	subs	r1, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	e051      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e04f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_I2C_Init+0x168>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1e58      	subs	r0, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e012      	b.n	800193e <HAL_I2C_Init+0x18e>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Init+0x196>
 8001942:	2301      	movs	r3, #1
 8001944:	e022      	b.n	800198c <HAL_I2C_Init+0x1dc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10e      	bne.n	800196c <HAL_I2C_Init+0x1bc>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e58      	subs	r0, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	440b      	add	r3, r1
 800195c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800196a:	e00f      	b.n	800198c <HAL_I2C_Init+0x1dc>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	0099      	lsls	r1, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	6809      	ldr	r1, [r1, #0]
 8001990:	4313      	orrs	r3, r2
 8001992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6911      	ldr	r1, [r2, #16]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68d2      	ldr	r2, [r2, #12]
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	000186a0 	.word	0x000186a0
 8001a28:	001e847f 	.word	0x001e847f
 8001a2c:	003d08ff 	.word	0x003d08ff
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fba0 	bl	8001190 <HAL_GetTick>
 8001a50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	f040 80e0 	bne.w	8001c20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2319      	movs	r3, #25
 8001a66:	2201      	movs	r2, #1
 8001a68:	4970      	ldr	r1, [pc, #448]	@ (8001c2c <HAL_I2C_Master_Transmit+0x1f4>)
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 fc64 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
 8001a78:	e0d3      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x50>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0cc      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d007      	beq.n	8001aae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001abc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2221      	movs	r2, #33	@ 0x21
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	893a      	ldrh	r2, [r7, #8]
 8001ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a50      	ldr	r2, [pc, #320]	@ (8001c30 <HAL_I2C_Master_Transmit+0x1f8>)
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 face 	bl	8002098 <I2C_MasterRequestWrite>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e08d      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b1c:	e066      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fd22 	bl	800256c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d107      	bne.n	8001b46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06b      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d11b      	bne.n	8001bc0 <HAL_I2C_Master_Transmit+0x188>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	6a39      	ldr	r1, [r7, #32]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fd19 	bl	80025fc <I2C_WaitOnBTFFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01a      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d194      	bne.n	8001b1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	00100002 	.word	0x00100002
 8001c30:	ffff0000 	.word	0xffff0000

08001c34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	@ 0x30
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	817b      	strh	r3, [r7, #10]
 8001c44:	4613      	mov	r3, r2
 8001c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff faa2 	bl	8001190 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	f040 8217 	bne.w	800208a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2319      	movs	r3, #25
 8001c62:	2201      	movs	r2, #1
 8001c64:	497c      	ldr	r1, [pc, #496]	@ (8001e58 <HAL_I2C_Master_Receive+0x224>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fb66 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e20a      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2C_Master_Receive+0x50>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e203      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d007      	beq.n	8001caa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2222      	movs	r2, #34	@ 0x22
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	893a      	ldrh	r2, [r7, #8]
 8001cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a5c      	ldr	r2, [pc, #368]	@ (8001e5c <HAL_I2C_Master_Receive+0x228>)
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cec:	8979      	ldrh	r1, [r7, #10]
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fa52 	bl	800219c <I2C_MasterRequestRead>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1c4      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d113      	bne.n	8001d32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	623b      	str	r3, [r7, #32]
 8001d1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e198      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d11b      	bne.n	8001d72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e178      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d11b      	bne.n	8001db2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	e158      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001dd8:	e144      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	f200 80f1 	bhi.w	8001fc6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d123      	bne.n	8001e34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fc4b 	bl	800268c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e145      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e32:	e117      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d14e      	bne.n	8001eda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	2200      	movs	r2, #0
 8001e44:	4906      	ldr	r1, [pc, #24]	@ (8001e60 <HAL_I2C_Master_Receive+0x22c>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fa76 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e11a      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
 8001e56:	bf00      	nop
 8001e58:	00100002 	.word	0x00100002
 8001e5c:	ffff0000 	.word	0xffff0000
 8001e60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ed8:	e0c4      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	496c      	ldr	r1, [pc, #432]	@ (8002094 <HAL_I2C_Master_Receive+0x460>)
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fa27 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0cb      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4955      	ldr	r1, [pc, #340]	@ (8002094 <HAL_I2C_Master_Receive+0x460>)
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f9f9 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e09d      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fc4:	e04e      	b.n	8002064 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fb5e 	bl	800268c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e058      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d124      	bne.n	8002064 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	2b03      	cmp	r3, #3
 8002020:	d107      	bne.n	8002032 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002030:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f aeb6 	bne.w	8001dda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3728      	adds	r7, #40	@ 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	00010004 	.word	0x00010004

08002098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	460b      	mov	r3, r1
 80020a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d006      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d003      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020c0:	d108      	bne.n	80020d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e00b      	b.n	80020ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	2b12      	cmp	r3, #18
 80020da:	d107      	bne.n	80020ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f91d 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002112:	d103      	bne.n	800211c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e035      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002128:	d108      	bne.n	800213c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e01b      	b.n	8002174 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030f 	orn	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	490e      	ldr	r1, [pc, #56]	@ (8002194 <I2C_MasterRequestWrite+0xfc>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f966 	bl	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e010      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4907      	ldr	r1, [pc, #28]	@ (8002198 <I2C_MasterRequestWrite+0x100>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f956 	bl	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	00010008 	.word	0x00010008
 8002198:	00010002 	.word	0x00010002

0800219c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	460b      	mov	r3, r1
 80021aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d006      	beq.n	80021d6 <I2C_MasterRequestRead+0x3a>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d003      	beq.n	80021d6 <I2C_MasterRequestRead+0x3a>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021d4:	d108      	bne.n	80021e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e00b      	b.n	8002200 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d107      	bne.n	8002200 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f893 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002226:	d103      	bne.n	8002230 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e079      	b.n	8002328 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800223c:	d108      	bne.n	8002250 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e05f      	b.n	8002310 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002250:	897b      	ldrh	r3, [r7, #10]
 8002252:	11db      	asrs	r3, r3, #7
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 0306 	and.w	r3, r3, #6
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f063 030f 	orn	r3, r3, #15
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4930      	ldr	r1, [pc, #192]	@ (8002330 <I2C_MasterRequestRead+0x194>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8dc 	bl	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e054      	b.n	8002328 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4929      	ldr	r1, [pc, #164]	@ (8002334 <I2C_MasterRequestRead+0x198>)
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f8cc 	bl	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e044      	b.n	8002328 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f831 	bl	8002338 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ea:	d103      	bne.n	80022f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e017      	b.n	8002328 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022f8:	897b      	ldrh	r3, [r7, #10]
 80022fa:	11db      	asrs	r3, r3, #7
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f003 0306 	and.w	r3, r3, #6
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f063 030e 	orn	r3, r3, #14
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4907      	ldr	r1, [pc, #28]	@ (8002334 <I2C_MasterRequestRead+0x198>)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f888 	bl	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00010008 	.word	0x00010008
 8002334:	00010002 	.word	0x00010002

08002338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	e048      	b.n	80023dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d044      	beq.n	80023dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe ff1d 	bl	8001190 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d139      	bne.n	80023dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10d      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	e00c      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d116      	bne.n	80023dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e023      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10d      	bne.n	8002402 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	e00c      	b.n	800241c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	429a      	cmp	r2, r3
 8002420:	d093      	beq.n	800234a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800243a:	e071      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d123      	bne.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e067      	b.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d041      	beq.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249c:	f7fe fe78 	bl	8001190 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d136      	bne.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10c      	bne.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e00b      	b.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e021      	b.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10c      	bne.n	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	43da      	mvns	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e00b      	b.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f af6d 	bne.w	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002578:	e034      	b.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8e3 	bl	8002746 <I2C_IsAcknowledgeFailed>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e034      	b.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d028      	beq.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe fdfd 	bl	8001190 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11d      	bne.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b2:	2b80      	cmp	r3, #128	@ 0x80
 80025b4:	d016      	beq.n	80025e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e007      	b.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b80      	cmp	r3, #128	@ 0x80
 80025f0:	d1c3      	bne.n	800257a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002608:	e034      	b.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f89b 	bl	8002746 <I2C_IsAcknowledgeFailed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e034      	b.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d028      	beq.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7fe fdb5 	bl	8001190 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d1c3      	bne.n	800260a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002698:	e049      	b.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d119      	bne.n	80026dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e030      	b.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026dc:	f7fe fd58 	bl	8001190 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d302      	bcc.n	80026f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11d      	bne.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fc:	2b40      	cmp	r3, #64	@ 0x40
 80026fe:	d016      	beq.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d1ae      	bne.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275c:	d11b      	bne.n	8002796 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002766:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f043 0204 	orr.w	r2, r3, #4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e267      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00c      	beq.n	80027e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b85      	ldr	r3, [pc, #532]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b82      	ldr	r3, [pc, #520]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e6:	d10b      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	4b7e      	ldr	r3, [pc, #504]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05b      	beq.n	80028ac <HAL_RCC_OscConfig+0x108>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d157      	bne.n	80028ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e242      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d106      	bne.n	8002818 <HAL_RCC_OscConfig+0x74>
 800280a:	4b76      	ldr	r3, [pc, #472]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x98>
 8002822:	4b70      	ldr	r3, [pc, #448]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6f      	ldr	r2, [pc, #444]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6c      	ldr	r2, [pc, #432]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xb0>
 800283c:	4b69      	ldr	r3, [pc, #420]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a68      	ldr	r2, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b66      	ldr	r3, [pc, #408]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a65      	ldr	r2, [pc, #404]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fc98 	bl	8001190 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fc94 	bl	8001190 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e207      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b5b      	ldr	r3, [pc, #364]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xc0>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fc84 	bl	8001190 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fc80 	bl	8001190 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1f3      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b51      	ldr	r3, [pc, #324]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0xe8>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ba:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b47      	ldr	r3, [pc, #284]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b41      	ldr	r3, [pc, #260]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1c7      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4937      	ldr	r1, [pc, #220]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fc39 	bl	8001190 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fc35 	bl	8001190 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1a8      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4925      	ldr	r1, [pc, #148]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <HAL_RCC_OscConfig+0x244>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fc18 	bl	8001190 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fc14 	bl	8001190 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e187      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d036      	beq.n	80029fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_RCC_OscConfig+0x248>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fbf8 	bl	8001190 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fbf4 	bl	8001190 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e167      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x200>
 80029c2:	e01b      	b.n	80029fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_OscConfig+0x248>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fbe1 	bl	8001190 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00e      	b.n	80029f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fbdd 	bl	8001190 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d907      	bls.n	80029f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e150      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b88      	ldr	r3, [pc, #544]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ea      	bne.n	80029d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8097 	beq.w	8002b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b81      	ldr	r3, [pc, #516]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	4a7c      	ldr	r2, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b77      	ldr	r3, [pc, #476]	@ (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b74      	ldr	r3, [pc, #464]	@ (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a73      	ldr	r2, [pc, #460]	@ (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fb9d 	bl	8001190 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe fb99 	bl	8001190 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e10c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_OscConfig+0x474>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2ea>
 8002a80:	4b64      	ldr	r3, [pc, #400]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a63      	ldr	r2, [pc, #396]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8c:	e01c      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x30c>
 8002a96:	4b5f      	ldr	r3, [pc, #380]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0x324>
 8002ab0:	4b58      	ldr	r3, [pc, #352]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	4a57      	ldr	r2, [pc, #348]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abc:	4b55      	ldr	r3, [pc, #340]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	4a54      	ldr	r2, [pc, #336]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fb5e 	bl	8001190 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fb5a 	bl	8001190 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0cb      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ee      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x334>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fb48 	bl	8001190 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fb44 	bl	8001190 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0b5      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ee      	bne.n	8002b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	4a38      	ldr	r2, [pc, #224]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a1 	beq.w	8002c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b42:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d05c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d141      	bne.n	8002bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb18 	bl	8001190 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fb14 	bl	8001190 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e087      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	4b27      	ldr	r3, [pc, #156]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	491b      	ldr	r1, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe faed 	bl	8001190 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fae9 	bl	8001190 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e05c      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x416>
 8002bd8:	e054      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fad6 	bl	8001190 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fad2 	bl	8001190 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e045      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x444>
 8002c06:	e03d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e038      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x4ec>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d121      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d11a      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d111      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cc      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b68      	ldr	r3, [pc, #416]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b65      	ldr	r3, [pc, #404]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b63      	ldr	r3, [pc, #396]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b8      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce8:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a52      	ldr	r2, [pc, #328]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	494d      	ldr	r1, [pc, #308]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d044      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e067      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4934      	ldr	r1, [pc, #208]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fa04 	bl	8001190 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe fa00 	bl	8001190 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d20c      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e032      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4916      	ldr	r1, [pc, #88]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f821 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	490a      	ldr	r1, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	5ccb      	ldrb	r3, [r1, r3]
 8002e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e32:	4a09      	ldr	r2, [pc, #36]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f964 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00
 8002e50:	40023800 	.word	0x40023800
 8002e54:	080047b8 	.word	0x080047b8
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	20000008 	.word	0x20000008

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b094      	sub	sp, #80	@ 0x50
 8002e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e78:	4b79      	ldr	r3, [pc, #484]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d00d      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	f200 80e1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e92:	e0db      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b73      	ldr	r3, [pc, #460]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e98:	e0db      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9a:	4b73      	ldr	r3, [pc, #460]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9e:	e0d8      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ec0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	6139      	str	r1, [r7, #16]
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f04:	4659      	mov	r1, fp
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4651      	mov	r1, sl
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4651      	mov	r1, sl
 8002f14:	ebb2 0801 	subs.w	r8, r2, r1
 8002f18:	4659      	mov	r1, fp
 8002f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f32:	4690      	mov	r8, r2
 8002f34:	4699      	mov	r9, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb18 0303 	adds.w	r3, r8, r3
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	eb49 0303 	adc.w	r3, r9, r3
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f52:	4629      	mov	r1, r5
 8002f54:	024b      	lsls	r3, r1, #9
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	024a      	lsls	r2, r1, #9
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f70:	f7fd f97e 	bl	8000270 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f7c:	e058      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7e:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	2200      	movs	r2, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	4611      	mov	r1, r2
 8002f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0159      	lsls	r1, r3, #5
 8002fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002faa:	0150      	lsls	r0, r2, #5
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	18e3      	adds	r3, r4, r3
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb45 0303 	adc.w	r3, r5, r3
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003006:	4629      	mov	r1, r5
 8003008:	028b      	lsls	r3, r1, #10
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003010:	4621      	mov	r1, r4
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	2200      	movs	r2, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	61fa      	str	r2, [r7, #28]
 8003020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003024:	f7fd f924 	bl	8000270 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x200>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003040:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x204>)
 800304e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003054:	4618      	mov	r0, r3
 8003056:	3750      	adds	r7, #80	@ 0x50
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	00f42400 	.word	0x00f42400
 8003068:	007a1200 	.word	0x007a1200

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	@ (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	080047c8 	.word	0x080047c8

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b0:	f7ff ffdc 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0b5b      	lsrs	r3, r3, #13
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	@ (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	080047c8 	.word	0x080047c8

080030d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e042      	b.n	800316c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fe84 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f973 	bl	8003404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800312c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d175      	bne.n	8003280 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_Transmit+0x2c>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e06e      	b.n	8003282 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	@ 0x21
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b2:	f7fd ffed 	bl	8001190 <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031e8:	e02e      	b.n	8003248 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f848 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e03a      	b.n	8003282 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e007      	b.n	800323a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3301      	adds	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1cb      	bne.n	80031ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2140      	movs	r1, #64	@ 0x40
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f814 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e006      	b.n	8003282 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329a:	e03b      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d037      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fd ff74 	bl	8001190 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	6a3a      	ldr	r2, [r7, #32]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <UART_WaitOnFlagUntilTimeout+0x30>
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e03a      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b80      	cmp	r3, #128	@ 0x80
 80032d0:	d020      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b40      	cmp	r3, #64	@ 0x40
 80032d6:	d01d      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d116      	bne.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f81d 	bl	800333c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2208      	movs	r2, #8
 8003306:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e00f      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d0b4      	beq.n	800329c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b095      	sub	sp, #84	@ 0x54
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800335a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003364:	643a      	str	r2, [r7, #64]	@ 0x40
 8003366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800336a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e5      	bne.n	8003344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	61fb      	str	r3, [r7, #28]
   return(result);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003398:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d119      	bne.n	80033e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f023 0310 	bic.w	r3, r3, #16
 80033ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d4:	61ba      	str	r2, [r7, #24]
 80033d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	613b      	str	r3, [r7, #16]
   return(result);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033f6:	bf00      	nop
 80033f8:	3754      	adds	r7, #84	@ 0x54
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b0c0      	sub	sp, #256	@ 0x100
 800340a:	af00      	add	r7, sp, #0
 800340c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	ea40 0301 	orr.w	r3, r0, r1
 800342c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	431a      	orrs	r2, r3
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800345c:	f021 010c 	bic.w	r1, r1, #12
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800346a:	430b      	orrs	r3, r1
 800346c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	6999      	ldr	r1, [r3, #24]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	ea40 0301 	orr.w	r3, r0, r1
 800348a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b8f      	ldr	r3, [pc, #572]	@ (80036d0 <UART_SetConfig+0x2cc>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <UART_SetConfig+0xa0>
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <UART_SetConfig+0x2d0>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d104      	bne.n	80034ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff fe02 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 80034a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034ac:	e003      	b.n	80034b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ae:	f7ff fde9 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80034b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c0:	f040 810c 	bne.w	80036dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034de:	415b      	adcs	r3, r3
 80034e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034e6:	4621      	mov	r1, r4
 80034e8:	eb12 0801 	adds.w	r8, r2, r1
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb43 0901 	adc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003514:	462b      	mov	r3, r5
 8003516:	eb49 0303 	adc.w	r3, r9, r3
 800351a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800352a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800352e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003532:	460b      	mov	r3, r1
 8003534:	18db      	adds	r3, r3, r3
 8003536:	653b      	str	r3, [r7, #80]	@ 0x50
 8003538:	4613      	mov	r3, r2
 800353a:	eb42 0303 	adc.w	r3, r2, r3
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003548:	f7fc fe92 	bl	8000270 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b61      	ldr	r3, [pc, #388]	@ (80036d8 <UART_SetConfig+0x2d4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011c      	lsls	r4, r3, #4
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003574:	415b      	adcs	r3, r3
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800357c:	4641      	mov	r1, r8
 800357e:	eb12 0a01 	adds.w	sl, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb43 0b01 	adc.w	fp, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	4692      	mov	sl, r2
 800359e:	469b      	mov	fp, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	eb1a 0303 	adds.w	r3, sl, r3
 80035a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb4b 0303 	adc.w	r3, fp, r3
 80035b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035c8:	460b      	mov	r3, r1
 80035ca:	18db      	adds	r3, r3, r3
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ce:	4613      	mov	r3, r2
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035de:	f7fc fe47 	bl	8000270 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4b3b      	ldr	r3, [pc, #236]	@ (80036d8 <UART_SetConfig+0x2d4>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2264      	movs	r2, #100	@ 0x64
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035fe:	4b36      	ldr	r3, [pc, #216]	@ (80036d8 <UART_SetConfig+0x2d4>)
 8003600:	fba3 2302 	umull	r2, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800360c:	441c      	add	r4, r3
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800361c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003628:	415b      	adcs	r3, r3
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6339      	str	r1, [r7, #48]	@ 0x30
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003664:	464b      	mov	r3, r9
 8003666:	460a      	mov	r2, r1
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800367c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800369a:	f7fc fde9 	bl	8000270 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <UART_SetConfig+0x2d4>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	2164      	movs	r1, #100	@ 0x64
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	3332      	adds	r3, #50	@ 0x32
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <UART_SetConfig+0x2d4>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f003 0207 	and.w	r2, r3, #7
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4422      	add	r2, r4
 80036ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036cc:	e106      	b.n	80038dc <UART_SetConfig+0x4d8>
 80036ce:	bf00      	nop
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011400 	.word	0x40011400
 80036d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036ee:	4642      	mov	r2, r8
 80036f0:	464b      	mov	r3, r9
 80036f2:	1891      	adds	r1, r2, r2
 80036f4:	6239      	str	r1, [r7, #32]
 80036f6:	415b      	adcs	r3, r3
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fe:	4641      	mov	r1, r8
 8003700:	1854      	adds	r4, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb43 0501 	adc.w	r5, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003724:	464b      	mov	r3, r9
 8003726:	eb45 0303 	adc.w	r3, r5, r3
 800372a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800373a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800374a:	4629      	mov	r1, r5
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	4621      	mov	r1, r4
 8003750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003754:	4621      	mov	r1, r4
 8003756:	008a      	lsls	r2, r1, #2
 8003758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800375c:	f7fc fd88 	bl	8000270 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4b60      	ldr	r3, [pc, #384]	@ (80038e8 <UART_SetConfig+0x4e4>)
 8003766:	fba3 2302 	umull	r2, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	011c      	lsls	r4, r3, #4
 800376e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800377c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003780:	4642      	mov	r2, r8
 8003782:	464b      	mov	r3, r9
 8003784:	1891      	adds	r1, r2, r2
 8003786:	61b9      	str	r1, [r7, #24]
 8003788:	415b      	adcs	r3, r3
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003790:	4641      	mov	r1, r8
 8003792:	1851      	adds	r1, r2, r1
 8003794:	6139      	str	r1, [r7, #16]
 8003796:	4649      	mov	r1, r9
 8003798:	414b      	adcs	r3, r1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a8:	4659      	mov	r1, fp
 80037aa:	00cb      	lsls	r3, r1, #3
 80037ac:	4651      	mov	r1, sl
 80037ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b2:	4651      	mov	r1, sl
 80037b4:	00ca      	lsls	r2, r1, #3
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	4642      	mov	r2, r8
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037c4:	464b      	mov	r3, r9
 80037c6:	460a      	mov	r2, r1
 80037c8:	eb42 0303 	adc.w	r3, r2, r3
 80037cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037e8:	4649      	mov	r1, r9
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f2:	4641      	mov	r1, r8
 80037f4:	008a      	lsls	r2, r1, #2
 80037f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037fa:	f7fc fd39 	bl	8000270 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4611      	mov	r1, r2
 8003804:	4b38      	ldr	r3, [pc, #224]	@ (80038e8 <UART_SetConfig+0x4e4>)
 8003806:	fba3 2301 	umull	r2, r3, r3, r1
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2264      	movs	r2, #100	@ 0x64
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	1acb      	subs	r3, r1, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	@ 0x32
 8003818:	4a33      	ldr	r2, [pc, #204]	@ (80038e8 <UART_SetConfig+0x4e4>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003824:	441c      	add	r4, r3
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	673b      	str	r3, [r7, #112]	@ 0x70
 800382e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	415b      	adcs	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003844:	4641      	mov	r1, r8
 8003846:	1851      	adds	r1, r2, r1
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	4649      	mov	r1, r9
 800384c:	414b      	adcs	r3, r1
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385c:	4659      	mov	r1, fp
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4651      	mov	r1, sl
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4642      	mov	r2, r8
 8003872:	189b      	adds	r3, r3, r2
 8003874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003876:	464b      	mov	r3, r9
 8003878:	460a      	mov	r2, r1
 800387a:	eb42 0303 	adc.w	r3, r2, r3
 800387e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	663b      	str	r3, [r7, #96]	@ 0x60
 800388a:	667a      	str	r2, [r7, #100]	@ 0x64
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003898:	4649      	mov	r1, r9
 800389a:	008b      	lsls	r3, r1, #2
 800389c:	4641      	mov	r1, r8
 800389e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a2:	4641      	mov	r1, r8
 80038a4:	008a      	lsls	r2, r1, #2
 80038a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038aa:	f7fc fce1 	bl	8000270 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <UART_SetConfig+0x4e4>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	@ 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	@ 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	@ (80038e8 <UART_SetConfig+0x4e4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4422      	add	r2, r4
 80038da:	609a      	str	r2, [r3, #8]
}
 80038dc:	bf00      	nop
 80038de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038e2:	46bd      	mov	sp, r7
 80038e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <std>:
 80038ec:	2300      	movs	r3, #0
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	e9c0 3300 	strd	r3, r3, [r0]
 80038f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038fa:	6083      	str	r3, [r0, #8]
 80038fc:	8181      	strh	r1, [r0, #12]
 80038fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003900:	81c2      	strh	r2, [r0, #14]
 8003902:	6183      	str	r3, [r0, #24]
 8003904:	4619      	mov	r1, r3
 8003906:	2208      	movs	r2, #8
 8003908:	305c      	adds	r0, #92	@ 0x5c
 800390a:	f000 f906 	bl	8003b1a <memset>
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <std+0x58>)
 8003910:	6263      	str	r3, [r4, #36]	@ 0x24
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <std+0x5c>)
 8003914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <std+0x60>)
 8003918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800391a:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <std+0x64>)
 800391c:	6323      	str	r3, [r4, #48]	@ 0x30
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <std+0x68>)
 8003920:	6224      	str	r4, [r4, #32]
 8003922:	429c      	cmp	r4, r3
 8003924:	d006      	beq.n	8003934 <std+0x48>
 8003926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800392a:	4294      	cmp	r4, r2
 800392c:	d002      	beq.n	8003934 <std+0x48>
 800392e:	33d0      	adds	r3, #208	@ 0xd0
 8003930:	429c      	cmp	r4, r3
 8003932:	d105      	bne.n	8003940 <std+0x54>
 8003934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393c:	f000 b966 	b.w	8003c0c <__retarget_lock_init_recursive>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	bf00      	nop
 8003944:	08003a95 	.word	0x08003a95
 8003948:	08003ab7 	.word	0x08003ab7
 800394c:	08003aef 	.word	0x08003aef
 8003950:	08003b13 	.word	0x08003b13
 8003954:	20000150 	.word	0x20000150

08003958 <stdio_exit_handler>:
 8003958:	4a02      	ldr	r2, [pc, #8]	@ (8003964 <stdio_exit_handler+0xc>)
 800395a:	4903      	ldr	r1, [pc, #12]	@ (8003968 <stdio_exit_handler+0x10>)
 800395c:	4803      	ldr	r0, [pc, #12]	@ (800396c <stdio_exit_handler+0x14>)
 800395e:	f000 b869 	b.w	8003a34 <_fwalk_sglue>
 8003962:	bf00      	nop
 8003964:	20000010 	.word	0x20000010
 8003968:	080044ad 	.word	0x080044ad
 800396c:	20000020 	.word	0x20000020

08003970 <cleanup_stdio>:
 8003970:	6841      	ldr	r1, [r0, #4]
 8003972:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <cleanup_stdio+0x34>)
 8003974:	4299      	cmp	r1, r3
 8003976:	b510      	push	{r4, lr}
 8003978:	4604      	mov	r4, r0
 800397a:	d001      	beq.n	8003980 <cleanup_stdio+0x10>
 800397c:	f000 fd96 	bl	80044ac <_fflush_r>
 8003980:	68a1      	ldr	r1, [r4, #8]
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <cleanup_stdio+0x38>)
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <cleanup_stdio+0x1e>
 8003988:	4620      	mov	r0, r4
 800398a:	f000 fd8f 	bl	80044ac <_fflush_r>
 800398e:	68e1      	ldr	r1, [r4, #12]
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <cleanup_stdio+0x3c>)
 8003992:	4299      	cmp	r1, r3
 8003994:	d004      	beq.n	80039a0 <cleanup_stdio+0x30>
 8003996:	4620      	mov	r0, r4
 8003998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800399c:	f000 bd86 	b.w	80044ac <_fflush_r>
 80039a0:	bd10      	pop	{r4, pc}
 80039a2:	bf00      	nop
 80039a4:	20000150 	.word	0x20000150
 80039a8:	200001b8 	.word	0x200001b8
 80039ac:	20000220 	.word	0x20000220

080039b0 <global_stdio_init.part.0>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <global_stdio_init.part.0+0x30>)
 80039b4:	4c0b      	ldr	r4, [pc, #44]	@ (80039e4 <global_stdio_init.part.0+0x34>)
 80039b6:	4a0c      	ldr	r2, [pc, #48]	@ (80039e8 <global_stdio_init.part.0+0x38>)
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	4620      	mov	r0, r4
 80039bc:	2200      	movs	r2, #0
 80039be:	2104      	movs	r1, #4
 80039c0:	f7ff ff94 	bl	80038ec <std>
 80039c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039c8:	2201      	movs	r2, #1
 80039ca:	2109      	movs	r1, #9
 80039cc:	f7ff ff8e 	bl	80038ec <std>
 80039d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039d4:	2202      	movs	r2, #2
 80039d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039da:	2112      	movs	r1, #18
 80039dc:	f7ff bf86 	b.w	80038ec <std>
 80039e0:	20000288 	.word	0x20000288
 80039e4:	20000150 	.word	0x20000150
 80039e8:	08003959 	.word	0x08003959

080039ec <__sfp_lock_acquire>:
 80039ec:	4801      	ldr	r0, [pc, #4]	@ (80039f4 <__sfp_lock_acquire+0x8>)
 80039ee:	f000 b90e 	b.w	8003c0e <__retarget_lock_acquire_recursive>
 80039f2:	bf00      	nop
 80039f4:	20000291 	.word	0x20000291

080039f8 <__sfp_lock_release>:
 80039f8:	4801      	ldr	r0, [pc, #4]	@ (8003a00 <__sfp_lock_release+0x8>)
 80039fa:	f000 b909 	b.w	8003c10 <__retarget_lock_release_recursive>
 80039fe:	bf00      	nop
 8003a00:	20000291 	.word	0x20000291

08003a04 <__sinit>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4604      	mov	r4, r0
 8003a08:	f7ff fff0 	bl	80039ec <__sfp_lock_acquire>
 8003a0c:	6a23      	ldr	r3, [r4, #32]
 8003a0e:	b11b      	cbz	r3, 8003a18 <__sinit+0x14>
 8003a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a14:	f7ff bff0 	b.w	80039f8 <__sfp_lock_release>
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <__sinit+0x28>)
 8003a1a:	6223      	str	r3, [r4, #32]
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__sinit+0x2c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f5      	bne.n	8003a10 <__sinit+0xc>
 8003a24:	f7ff ffc4 	bl	80039b0 <global_stdio_init.part.0>
 8003a28:	e7f2      	b.n	8003a10 <__sinit+0xc>
 8003a2a:	bf00      	nop
 8003a2c:	08003971 	.word	0x08003971
 8003a30:	20000288 	.word	0x20000288

08003a34 <_fwalk_sglue>:
 8003a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a38:	4607      	mov	r7, r0
 8003a3a:	4688      	mov	r8, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	2600      	movs	r6, #0
 8003a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a44:	f1b9 0901 	subs.w	r9, r9, #1
 8003a48:	d505      	bpl.n	8003a56 <_fwalk_sglue+0x22>
 8003a4a:	6824      	ldr	r4, [r4, #0]
 8003a4c:	2c00      	cmp	r4, #0
 8003a4e:	d1f7      	bne.n	8003a40 <_fwalk_sglue+0xc>
 8003a50:	4630      	mov	r0, r6
 8003a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a56:	89ab      	ldrh	r3, [r5, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d907      	bls.n	8003a6c <_fwalk_sglue+0x38>
 8003a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a60:	3301      	adds	r3, #1
 8003a62:	d003      	beq.n	8003a6c <_fwalk_sglue+0x38>
 8003a64:	4629      	mov	r1, r5
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c0      	blx	r8
 8003a6a:	4306      	orrs	r6, r0
 8003a6c:	3568      	adds	r5, #104	@ 0x68
 8003a6e:	e7e9      	b.n	8003a44 <_fwalk_sglue+0x10>

08003a70 <iprintf>:
 8003a70:	b40f      	push	{r0, r1, r2, r3}
 8003a72:	b507      	push	{r0, r1, r2, lr}
 8003a74:	4906      	ldr	r1, [pc, #24]	@ (8003a90 <iprintf+0x20>)
 8003a76:	ab04      	add	r3, sp, #16
 8003a78:	6808      	ldr	r0, [r1, #0]
 8003a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a7e:	6881      	ldr	r1, [r0, #8]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f000 f9e9 	bl	8003e58 <_vfiprintf_r>
 8003a86:	b003      	add	sp, #12
 8003a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a8c:	b004      	add	sp, #16
 8003a8e:	4770      	bx	lr
 8003a90:	2000001c 	.word	0x2000001c

08003a94 <__sread>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	460c      	mov	r4, r1
 8003a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9c:	f000 f868 	bl	8003b70 <_read_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	bfab      	itete	ge
 8003aa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa8:	181b      	addge	r3, r3, r0
 8003aaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aae:	bfac      	ite	ge
 8003ab0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ab2:	81a3      	strhlt	r3, [r4, #12]
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <__swrite>:
 8003ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aba:	461f      	mov	r7, r3
 8003abc:	898b      	ldrh	r3, [r1, #12]
 8003abe:	05db      	lsls	r3, r3, #23
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	4616      	mov	r6, r2
 8003ac6:	d505      	bpl.n	8003ad4 <__swrite+0x1e>
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	2302      	movs	r3, #2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f000 f83c 	bl	8003b4c <_lseek_r>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aea:	f000 b853 	b.w	8003b94 <_write_r>

08003aee <__sseek>:
 8003aee:	b510      	push	{r4, lr}
 8003af0:	460c      	mov	r4, r1
 8003af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af6:	f000 f829 	bl	8003b4c <_lseek_r>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	bf15      	itete	ne
 8003b00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b0a:	81a3      	strheq	r3, [r4, #12]
 8003b0c:	bf18      	it	ne
 8003b0e:	81a3      	strhne	r3, [r4, #12]
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <__sclose>:
 8003b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b16:	f000 b809 	b.w	8003b2c <_close_r>

08003b1a <memset>:
 8003b1a:	4402      	add	r2, r0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d100      	bne.n	8003b24 <memset+0xa>
 8003b22:	4770      	bx	lr
 8003b24:	f803 1b01 	strb.w	r1, [r3], #1
 8003b28:	e7f9      	b.n	8003b1e <memset+0x4>
	...

08003b2c <_close_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4d06      	ldr	r5, [pc, #24]	@ (8003b48 <_close_r+0x1c>)
 8003b30:	2300      	movs	r3, #0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	f7fd fa1d 	bl	8000f76 <_close>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_close_r+0x1a>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_close_r+0x1a>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	2000028c 	.word	0x2000028c

08003b4c <_lseek_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d07      	ldr	r5, [pc, #28]	@ (8003b6c <_lseek_r+0x20>)
 8003b50:	4604      	mov	r4, r0
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	602a      	str	r2, [r5, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7fd fa32 	bl	8000fc4 <_lseek>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_lseek_r+0x1e>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_lseek_r+0x1e>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	2000028c 	.word	0x2000028c

08003b70 <_read_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d07      	ldr	r5, [pc, #28]	@ (8003b90 <_read_r+0x20>)
 8003b74:	4604      	mov	r4, r0
 8003b76:	4608      	mov	r0, r1
 8003b78:	4611      	mov	r1, r2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	602a      	str	r2, [r5, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f7fd f9c0 	bl	8000f04 <_read>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d102      	bne.n	8003b8e <_read_r+0x1e>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	b103      	cbz	r3, 8003b8e <_read_r+0x1e>
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	2000028c 	.word	0x2000028c

08003b94 <_write_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4d07      	ldr	r5, [pc, #28]	@ (8003bb4 <_write_r+0x20>)
 8003b98:	4604      	mov	r4, r0
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	602a      	str	r2, [r5, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f7fd f9cb 	bl	8000f3e <_write>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_write_r+0x1e>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_write_r+0x1e>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	2000028c 	.word	0x2000028c

08003bb8 <__errno>:
 8003bb8:	4b01      	ldr	r3, [pc, #4]	@ (8003bc0 <__errno+0x8>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	2000001c 	.word	0x2000001c

08003bc4 <__libc_init_array>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bfc <__libc_init_array+0x38>)
 8003bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c00 <__libc_init_array+0x3c>)
 8003bca:	1b64      	subs	r4, r4, r5
 8003bcc:	10a4      	asrs	r4, r4, #2
 8003bce:	2600      	movs	r6, #0
 8003bd0:	42a6      	cmp	r6, r4
 8003bd2:	d109      	bne.n	8003be8 <__libc_init_array+0x24>
 8003bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c04 <__libc_init_array+0x40>)
 8003bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c08 <__libc_init_array+0x44>)
 8003bd8:	f000 fdb8 	bl	800474c <_init>
 8003bdc:	1b64      	subs	r4, r4, r5
 8003bde:	10a4      	asrs	r4, r4, #2
 8003be0:	2600      	movs	r6, #0
 8003be2:	42a6      	cmp	r6, r4
 8003be4:	d105      	bne.n	8003bf2 <__libc_init_array+0x2e>
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bec:	4798      	blx	r3
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7ee      	b.n	8003bd0 <__libc_init_array+0xc>
 8003bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf6:	4798      	blx	r3
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	e7f2      	b.n	8003be2 <__libc_init_array+0x1e>
 8003bfc:	0800480c 	.word	0x0800480c
 8003c00:	0800480c 	.word	0x0800480c
 8003c04:	0800480c 	.word	0x0800480c
 8003c08:	08004810 	.word	0x08004810

08003c0c <__retarget_lock_init_recursive>:
 8003c0c:	4770      	bx	lr

08003c0e <__retarget_lock_acquire_recursive>:
 8003c0e:	4770      	bx	lr

08003c10 <__retarget_lock_release_recursive>:
 8003c10:	4770      	bx	lr
	...

08003c14 <_free_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4605      	mov	r5, r0
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	d041      	beq.n	8003ca0 <_free_r+0x8c>
 8003c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c20:	1f0c      	subs	r4, r1, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bfb8      	it	lt
 8003c26:	18e4      	addlt	r4, r4, r3
 8003c28:	f000 f8e0 	bl	8003dec <__malloc_lock>
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <_free_r+0x90>)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	b933      	cbnz	r3, 8003c40 <_free_r+0x2c>
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	6014      	str	r4, [r2, #0]
 8003c36:	4628      	mov	r0, r5
 8003c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c3c:	f000 b8dc 	b.w	8003df8 <__malloc_unlock>
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d908      	bls.n	8003c56 <_free_r+0x42>
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	1821      	adds	r1, r4, r0
 8003c48:	428b      	cmp	r3, r1
 8003c4a:	bf01      	itttt	eq
 8003c4c:	6819      	ldreq	r1, [r3, #0]
 8003c4e:	685b      	ldreq	r3, [r3, #4]
 8003c50:	1809      	addeq	r1, r1, r0
 8003c52:	6021      	streq	r1, [r4, #0]
 8003c54:	e7ed      	b.n	8003c32 <_free_r+0x1e>
 8003c56:	461a      	mov	r2, r3
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b10b      	cbz	r3, 8003c60 <_free_r+0x4c>
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	d9fa      	bls.n	8003c56 <_free_r+0x42>
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	1850      	adds	r0, r2, r1
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d10b      	bne.n	8003c80 <_free_r+0x6c>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	4401      	add	r1, r0
 8003c6c:	1850      	adds	r0, r2, r1
 8003c6e:	4283      	cmp	r3, r0
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	d1e0      	bne.n	8003c36 <_free_r+0x22>
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	6053      	str	r3, [r2, #4]
 8003c7a:	4408      	add	r0, r1
 8003c7c:	6010      	str	r0, [r2, #0]
 8003c7e:	e7da      	b.n	8003c36 <_free_r+0x22>
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x74>
 8003c82:	230c      	movs	r3, #12
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	e7d6      	b.n	8003c36 <_free_r+0x22>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	1821      	adds	r1, r4, r0
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf04      	itt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	bf04      	itt	eq
 8003c98:	1809      	addeq	r1, r1, r0
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	6054      	str	r4, [r2, #4]
 8003c9e:	e7ca      	b.n	8003c36 <_free_r+0x22>
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000298 	.word	0x20000298

08003ca8 <sbrk_aligned>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce8 <sbrk_aligned+0x40>)
 8003cac:	460c      	mov	r4, r1
 8003cae:	6831      	ldr	r1, [r6, #0]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	b911      	cbnz	r1, 8003cba <sbrk_aligned+0x12>
 8003cb4:	f000 fcb6 	bl	8004624 <_sbrk_r>
 8003cb8:	6030      	str	r0, [r6, #0]
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f000 fcb1 	bl	8004624 <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d103      	bne.n	8003cce <sbrk_aligned+0x26>
 8003cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	1cc4      	adds	r4, r0, #3
 8003cd0:	f024 0403 	bic.w	r4, r4, #3
 8003cd4:	42a0      	cmp	r0, r4
 8003cd6:	d0f8      	beq.n	8003cca <sbrk_aligned+0x22>
 8003cd8:	1a21      	subs	r1, r4, r0
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 fca2 	bl	8004624 <_sbrk_r>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1f2      	bne.n	8003cca <sbrk_aligned+0x22>
 8003ce4:	e7ef      	b.n	8003cc6 <sbrk_aligned+0x1e>
 8003ce6:	bf00      	nop
 8003ce8:	20000294 	.word	0x20000294

08003cec <_malloc_r>:
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	1ccd      	adds	r5, r1, #3
 8003cf2:	f025 0503 	bic.w	r5, r5, #3
 8003cf6:	3508      	adds	r5, #8
 8003cf8:	2d0c      	cmp	r5, #12
 8003cfa:	bf38      	it	cc
 8003cfc:	250c      	movcc	r5, #12
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	4606      	mov	r6, r0
 8003d02:	db01      	blt.n	8003d08 <_malloc_r+0x1c>
 8003d04:	42a9      	cmp	r1, r5
 8003d06:	d904      	bls.n	8003d12 <_malloc_r+0x26>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de8 <_malloc_r+0xfc>
 8003d16:	f000 f869 	bl	8003dec <__malloc_lock>
 8003d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1e:	461c      	mov	r4, r3
 8003d20:	bb44      	cbnz	r4, 8003d74 <_malloc_r+0x88>
 8003d22:	4629      	mov	r1, r5
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff ffbf 	bl	8003ca8 <sbrk_aligned>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	d158      	bne.n	8003de2 <_malloc_r+0xf6>
 8003d30:	f8d8 4000 	ldr.w	r4, [r8]
 8003d34:	4627      	mov	r7, r4
 8003d36:	2f00      	cmp	r7, #0
 8003d38:	d143      	bne.n	8003dc2 <_malloc_r+0xd6>
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	d04b      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	4639      	mov	r1, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	eb04 0903 	add.w	r9, r4, r3
 8003d48:	f000 fc6c 	bl	8004624 <_sbrk_r>
 8003d4c:	4581      	cmp	r9, r0
 8003d4e:	d142      	bne.n	8003dd6 <_malloc_r+0xea>
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	1a6d      	subs	r5, r5, r1
 8003d54:	4629      	mov	r1, r5
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7ff ffa6 	bl	8003ca8 <sbrk_aligned>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d03a      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	442b      	add	r3, r5
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	bb62      	cbnz	r2, 8003dc8 <_malloc_r+0xdc>
 8003d6e:	f8c8 7000 	str.w	r7, [r8]
 8003d72:	e00f      	b.n	8003d94 <_malloc_r+0xa8>
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	1b52      	subs	r2, r2, r5
 8003d78:	d420      	bmi.n	8003dbc <_malloc_r+0xd0>
 8003d7a:	2a0b      	cmp	r2, #11
 8003d7c:	d917      	bls.n	8003dae <_malloc_r+0xc2>
 8003d7e:	1961      	adds	r1, r4, r5
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	6025      	str	r5, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	6059      	strne	r1, [r3, #4]
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	bf08      	it	eq
 8003d8c:	f8c8 1000 	streq.w	r1, [r8]
 8003d90:	5162      	str	r2, [r4, r5]
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f82f 	bl	8003df8 <__malloc_unlock>
 8003d9a:	f104 000b 	add.w	r0, r4, #11
 8003d9e:	1d23      	adds	r3, r4, #4
 8003da0:	f020 0007 	bic.w	r0, r0, #7
 8003da4:	1ac2      	subs	r2, r0, r3
 8003da6:	bf1c      	itt	ne
 8003da8:	1a1b      	subne	r3, r3, r0
 8003daa:	50a3      	strne	r3, [r4, r2]
 8003dac:	e7af      	b.n	8003d0e <_malloc_r+0x22>
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	bf0c      	ite	eq
 8003db4:	f8c8 2000 	streq.w	r2, [r8]
 8003db8:	605a      	strne	r2, [r3, #4]
 8003dba:	e7eb      	b.n	8003d94 <_malloc_r+0xa8>
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	6864      	ldr	r4, [r4, #4]
 8003dc0:	e7ae      	b.n	8003d20 <_malloc_r+0x34>
 8003dc2:	463c      	mov	r4, r7
 8003dc4:	687f      	ldr	r7, [r7, #4]
 8003dc6:	e7b6      	b.n	8003d36 <_malloc_r+0x4a>
 8003dc8:	461a      	mov	r2, r3
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d1fb      	bne.n	8003dc8 <_malloc_r+0xdc>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6053      	str	r3, [r2, #4]
 8003dd4:	e7de      	b.n	8003d94 <_malloc_r+0xa8>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f80c 	bl	8003df8 <__malloc_unlock>
 8003de0:	e794      	b.n	8003d0c <_malloc_r+0x20>
 8003de2:	6005      	str	r5, [r0, #0]
 8003de4:	e7d6      	b.n	8003d94 <_malloc_r+0xa8>
 8003de6:	bf00      	nop
 8003de8:	20000298 	.word	0x20000298

08003dec <__malloc_lock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	@ (8003df4 <__malloc_lock+0x8>)
 8003dee:	f7ff bf0e 	b.w	8003c0e <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000290 	.word	0x20000290

08003df8 <__malloc_unlock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_unlock+0x8>)
 8003dfa:	f7ff bf09 	b.w	8003c10 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	20000290 	.word	0x20000290

08003e04 <__sfputc_r>:
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	b410      	push	{r4}
 8003e0c:	6093      	str	r3, [r2, #8]
 8003e0e:	da08      	bge.n	8003e22 <__sfputc_r+0x1e>
 8003e10:	6994      	ldr	r4, [r2, #24]
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	db01      	blt.n	8003e1a <__sfputc_r+0x16>
 8003e16:	290a      	cmp	r1, #10
 8003e18:	d103      	bne.n	8003e22 <__sfputc_r+0x1e>
 8003e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e1e:	f000 bb6d 	b.w	80044fc <__swbuf_r>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	1c58      	adds	r0, r3, #1
 8003e26:	6010      	str	r0, [r2, #0]
 8003e28:	7019      	strb	r1, [r3, #0]
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <__sfputs_r>:
 8003e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	18d5      	adds	r5, r2, r3
 8003e3c:	42ac      	cmp	r4, r5
 8003e3e:	d101      	bne.n	8003e44 <__sfputs_r+0x12>
 8003e40:	2000      	movs	r0, #0
 8003e42:	e007      	b.n	8003e54 <__sfputs_r+0x22>
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7ff ffda 	bl	8003e04 <__sfputc_r>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d1f3      	bne.n	8003e3c <__sfputs_r+0xa>
 8003e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e58 <_vfiprintf_r>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	460d      	mov	r5, r1
 8003e5e:	b09d      	sub	sp, #116	@ 0x74
 8003e60:	4614      	mov	r4, r2
 8003e62:	4698      	mov	r8, r3
 8003e64:	4606      	mov	r6, r0
 8003e66:	b118      	cbz	r0, 8003e70 <_vfiprintf_r+0x18>
 8003e68:	6a03      	ldr	r3, [r0, #32]
 8003e6a:	b90b      	cbnz	r3, 8003e70 <_vfiprintf_r+0x18>
 8003e6c:	f7ff fdca 	bl	8003a04 <__sinit>
 8003e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <_vfiprintf_r+0x2a>
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	059a      	lsls	r2, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <_vfiprintf_r+0x2a>
 8003e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e7e:	f7ff fec6 	bl	8003c0e <__retarget_lock_acquire_recursive>
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	d501      	bpl.n	8003e8c <_vfiprintf_r+0x34>
 8003e88:	692b      	ldr	r3, [r5, #16]
 8003e8a:	b99b      	cbnz	r3, 8003eb4 <_vfiprintf_r+0x5c>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f000 fb72 	bl	8004578 <__swsetup_r>
 8003e94:	b170      	cbz	r0, 8003eb4 <_vfiprintf_r+0x5c>
 8003e96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e98:	07dc      	lsls	r4, r3, #31
 8003e9a:	d504      	bpl.n	8003ea6 <_vfiprintf_r+0x4e>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	b01d      	add	sp, #116	@ 0x74
 8003ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea6:	89ab      	ldrh	r3, [r5, #12]
 8003ea8:	0598      	lsls	r0, r3, #22
 8003eaa:	d4f7      	bmi.n	8003e9c <_vfiprintf_r+0x44>
 8003eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003eae:	f7ff feaf 	bl	8003c10 <__retarget_lock_release_recursive>
 8003eb2:	e7f3      	b.n	8003e9c <_vfiprintf_r+0x44>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eb8:	2320      	movs	r3, #32
 8003eba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec2:	2330      	movs	r3, #48	@ 0x30
 8003ec4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004074 <_vfiprintf_r+0x21c>
 8003ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ecc:	f04f 0901 	mov.w	r9, #1
 8003ed0:	4623      	mov	r3, r4
 8003ed2:	469a      	mov	sl, r3
 8003ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed8:	b10a      	cbz	r2, 8003ede <_vfiprintf_r+0x86>
 8003eda:	2a25      	cmp	r2, #37	@ 0x25
 8003edc:	d1f9      	bne.n	8003ed2 <_vfiprintf_r+0x7a>
 8003ede:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee2:	d00b      	beq.n	8003efc <_vfiprintf_r+0xa4>
 8003ee4:	465b      	mov	r3, fp
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4630      	mov	r0, r6
 8003eec:	f7ff ffa1 	bl	8003e32 <__sfputs_r>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	f000 80a7 	beq.w	8004044 <_vfiprintf_r+0x1ec>
 8003ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ef8:	445a      	add	r2, fp
 8003efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003efc:	f89a 3000 	ldrb.w	r3, [sl]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 809f 	beq.w	8004044 <_vfiprintf_r+0x1ec>
 8003f06:	2300      	movs	r3, #0
 8003f08:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f10:	f10a 0a01 	add.w	sl, sl, #1
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	9307      	str	r3, [sp, #28]
 8003f18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f1e:	4654      	mov	r4, sl
 8003f20:	2205      	movs	r2, #5
 8003f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f26:	4853      	ldr	r0, [pc, #332]	@ (8004074 <_vfiprintf_r+0x21c>)
 8003f28:	f7fc f952 	bl	80001d0 <memchr>
 8003f2c:	9a04      	ldr	r2, [sp, #16]
 8003f2e:	b9d8      	cbnz	r0, 8003f68 <_vfiprintf_r+0x110>
 8003f30:	06d1      	lsls	r1, r2, #27
 8003f32:	bf44      	itt	mi
 8003f34:	2320      	movmi	r3, #32
 8003f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f3a:	0713      	lsls	r3, r2, #28
 8003f3c:	bf44      	itt	mi
 8003f3e:	232b      	movmi	r3, #43	@ 0x2b
 8003f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f44:	f89a 3000 	ldrb.w	r3, [sl]
 8003f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f4a:	d015      	beq.n	8003f78 <_vfiprintf_r+0x120>
 8003f4c:	9a07      	ldr	r2, [sp, #28]
 8003f4e:	4654      	mov	r4, sl
 8003f50:	2000      	movs	r0, #0
 8003f52:	f04f 0c0a 	mov.w	ip, #10
 8003f56:	4621      	mov	r1, r4
 8003f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5c:	3b30      	subs	r3, #48	@ 0x30
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d94b      	bls.n	8003ffa <_vfiprintf_r+0x1a2>
 8003f62:	b1b0      	cbz	r0, 8003f92 <_vfiprintf_r+0x13a>
 8003f64:	9207      	str	r2, [sp, #28]
 8003f66:	e014      	b.n	8003f92 <_vfiprintf_r+0x13a>
 8003f68:	eba0 0308 	sub.w	r3, r0, r8
 8003f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	46a2      	mov	sl, r4
 8003f76:	e7d2      	b.n	8003f1e <_vfiprintf_r+0xc6>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	1d19      	adds	r1, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	9103      	str	r1, [sp, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bfbb      	ittet	lt
 8003f84:	425b      	neglt	r3, r3
 8003f86:	f042 0202 	orrlt.w	r2, r2, #2
 8003f8a:	9307      	strge	r3, [sp, #28]
 8003f8c:	9307      	strlt	r3, [sp, #28]
 8003f8e:	bfb8      	it	lt
 8003f90:	9204      	strlt	r2, [sp, #16]
 8003f92:	7823      	ldrb	r3, [r4, #0]
 8003f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f96:	d10a      	bne.n	8003fae <_vfiprintf_r+0x156>
 8003f98:	7863      	ldrb	r3, [r4, #1]
 8003f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f9c:	d132      	bne.n	8004004 <_vfiprintf_r+0x1ac>
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	9203      	str	r2, [sp, #12]
 8003fa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003faa:	3402      	adds	r4, #2
 8003fac:	9305      	str	r3, [sp, #20]
 8003fae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004084 <_vfiprintf_r+0x22c>
 8003fb2:	7821      	ldrb	r1, [r4, #0]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	4650      	mov	r0, sl
 8003fb8:	f7fc f90a 	bl	80001d0 <memchr>
 8003fbc:	b138      	cbz	r0, 8003fce <_vfiprintf_r+0x176>
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	eba0 000a 	sub.w	r0, r0, sl
 8003fc4:	2240      	movs	r2, #64	@ 0x40
 8003fc6:	4082      	lsls	r2, r0
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	3401      	adds	r4, #1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd2:	4829      	ldr	r0, [pc, #164]	@ (8004078 <_vfiprintf_r+0x220>)
 8003fd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fd8:	2206      	movs	r2, #6
 8003fda:	f7fc f8f9 	bl	80001d0 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d03f      	beq.n	8004062 <_vfiprintf_r+0x20a>
 8003fe2:	4b26      	ldr	r3, [pc, #152]	@ (800407c <_vfiprintf_r+0x224>)
 8003fe4:	bb1b      	cbnz	r3, 800402e <_vfiprintf_r+0x1d6>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3307      	adds	r3, #7
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ff4:	443b      	add	r3, r7
 8003ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff8:	e76a      	b.n	8003ed0 <_vfiprintf_r+0x78>
 8003ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ffe:	460c      	mov	r4, r1
 8004000:	2001      	movs	r0, #1
 8004002:	e7a8      	b.n	8003f56 <_vfiprintf_r+0xfe>
 8004004:	2300      	movs	r3, #0
 8004006:	3401      	adds	r4, #1
 8004008:	9305      	str	r3, [sp, #20]
 800400a:	4619      	mov	r1, r3
 800400c:	f04f 0c0a 	mov.w	ip, #10
 8004010:	4620      	mov	r0, r4
 8004012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004016:	3a30      	subs	r2, #48	@ 0x30
 8004018:	2a09      	cmp	r2, #9
 800401a:	d903      	bls.n	8004024 <_vfiprintf_r+0x1cc>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c6      	beq.n	8003fae <_vfiprintf_r+0x156>
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c4      	b.n	8003fae <_vfiprintf_r+0x156>
 8004024:	fb0c 2101 	mla	r1, ip, r1, r2
 8004028:	4604      	mov	r4, r0
 800402a:	2301      	movs	r3, #1
 800402c:	e7f0      	b.n	8004010 <_vfiprintf_r+0x1b8>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4b12      	ldr	r3, [pc, #72]	@ (8004080 <_vfiprintf_r+0x228>)
 8004036:	a904      	add	r1, sp, #16
 8004038:	4630      	mov	r0, r6
 800403a:	f3af 8000 	nop.w
 800403e:	4607      	mov	r7, r0
 8004040:	1c78      	adds	r0, r7, #1
 8004042:	d1d6      	bne.n	8003ff2 <_vfiprintf_r+0x19a>
 8004044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004046:	07d9      	lsls	r1, r3, #31
 8004048:	d405      	bmi.n	8004056 <_vfiprintf_r+0x1fe>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	059a      	lsls	r2, r3, #22
 800404e:	d402      	bmi.n	8004056 <_vfiprintf_r+0x1fe>
 8004050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004052:	f7ff fddd 	bl	8003c10 <__retarget_lock_release_recursive>
 8004056:	89ab      	ldrh	r3, [r5, #12]
 8004058:	065b      	lsls	r3, r3, #25
 800405a:	f53f af1f 	bmi.w	8003e9c <_vfiprintf_r+0x44>
 800405e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004060:	e71e      	b.n	8003ea0 <_vfiprintf_r+0x48>
 8004062:	ab03      	add	r3, sp, #12
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	462a      	mov	r2, r5
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <_vfiprintf_r+0x228>)
 800406a:	a904      	add	r1, sp, #16
 800406c:	4630      	mov	r0, r6
 800406e:	f000 f879 	bl	8004164 <_printf_i>
 8004072:	e7e4      	b.n	800403e <_vfiprintf_r+0x1e6>
 8004074:	080047d0 	.word	0x080047d0
 8004078:	080047da 	.word	0x080047da
 800407c:	00000000 	.word	0x00000000
 8004080:	08003e33 	.word	0x08003e33
 8004084:	080047d6 	.word	0x080047d6

08004088 <_printf_common>:
 8004088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	4616      	mov	r6, r2
 800408e:	4698      	mov	r8, r3
 8004090:	688a      	ldr	r2, [r1, #8]
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004098:	4293      	cmp	r3, r2
 800409a:	bfb8      	it	lt
 800409c:	4613      	movlt	r3, r2
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040a4:	4607      	mov	r7, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	b10a      	cbz	r2, 80040ae <_printf_common+0x26>
 80040aa:	3301      	adds	r3, #1
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	0699      	lsls	r1, r3, #26
 80040b2:	bf42      	ittt	mi
 80040b4:	6833      	ldrmi	r3, [r6, #0]
 80040b6:	3302      	addmi	r3, #2
 80040b8:	6033      	strmi	r3, [r6, #0]
 80040ba:	6825      	ldr	r5, [r4, #0]
 80040bc:	f015 0506 	ands.w	r5, r5, #6
 80040c0:	d106      	bne.n	80040d0 <_printf_common+0x48>
 80040c2:	f104 0a19 	add.w	sl, r4, #25
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	6832      	ldr	r2, [r6, #0]
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	42ab      	cmp	r3, r5
 80040ce:	dc26      	bgt.n	800411e <_printf_common+0x96>
 80040d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	3b00      	subs	r3, #0
 80040d8:	bf18      	it	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	0692      	lsls	r2, r2, #26
 80040de:	d42b      	bmi.n	8004138 <_printf_common+0xb0>
 80040e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040e4:	4641      	mov	r1, r8
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c8      	blx	r9
 80040ea:	3001      	adds	r0, #1
 80040ec:	d01e      	beq.n	800412c <_printf_common+0xa4>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	6922      	ldr	r2, [r4, #16]
 80040f2:	f003 0306 	and.w	r3, r3, #6
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf02      	ittt	eq
 80040fa:	68e5      	ldreq	r5, [r4, #12]
 80040fc:	6833      	ldreq	r3, [r6, #0]
 80040fe:	1aed      	subeq	r5, r5, r3
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	bf0c      	ite	eq
 8004104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004108:	2500      	movne	r5, #0
 800410a:	4293      	cmp	r3, r2
 800410c:	bfc4      	itt	gt
 800410e:	1a9b      	subgt	r3, r3, r2
 8004110:	18ed      	addgt	r5, r5, r3
 8004112:	2600      	movs	r6, #0
 8004114:	341a      	adds	r4, #26
 8004116:	42b5      	cmp	r5, r6
 8004118:	d11a      	bne.n	8004150 <_printf_common+0xc8>
 800411a:	2000      	movs	r0, #0
 800411c:	e008      	b.n	8004130 <_printf_common+0xa8>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4641      	mov	r1, r8
 8004124:	4638      	mov	r0, r7
 8004126:	47c8      	blx	r9
 8004128:	3001      	adds	r0, #1
 800412a:	d103      	bne.n	8004134 <_printf_common+0xac>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	3501      	adds	r5, #1
 8004136:	e7c6      	b.n	80040c6 <_printf_common+0x3e>
 8004138:	18e1      	adds	r1, r4, r3
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	2030      	movs	r0, #48	@ 0x30
 800413e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004142:	4422      	add	r2, r4
 8004144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800414c:	3302      	adds	r3, #2
 800414e:	e7c7      	b.n	80040e0 <_printf_common+0x58>
 8004150:	2301      	movs	r3, #1
 8004152:	4622      	mov	r2, r4
 8004154:	4641      	mov	r1, r8
 8004156:	4638      	mov	r0, r7
 8004158:	47c8      	blx	r9
 800415a:	3001      	adds	r0, #1
 800415c:	d0e6      	beq.n	800412c <_printf_common+0xa4>
 800415e:	3601      	adds	r6, #1
 8004160:	e7d9      	b.n	8004116 <_printf_common+0x8e>
	...

08004164 <_printf_i>:
 8004164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	7e0f      	ldrb	r7, [r1, #24]
 800416a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800416c:	2f78      	cmp	r7, #120	@ 0x78
 800416e:	4691      	mov	r9, r2
 8004170:	4680      	mov	r8, r0
 8004172:	460c      	mov	r4, r1
 8004174:	469a      	mov	sl, r3
 8004176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800417a:	d807      	bhi.n	800418c <_printf_i+0x28>
 800417c:	2f62      	cmp	r7, #98	@ 0x62
 800417e:	d80a      	bhi.n	8004196 <_printf_i+0x32>
 8004180:	2f00      	cmp	r7, #0
 8004182:	f000 80d2 	beq.w	800432a <_printf_i+0x1c6>
 8004186:	2f58      	cmp	r7, #88	@ 0x58
 8004188:	f000 80b9 	beq.w	80042fe <_printf_i+0x19a>
 800418c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004194:	e03a      	b.n	800420c <_printf_i+0xa8>
 8004196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800419a:	2b15      	cmp	r3, #21
 800419c:	d8f6      	bhi.n	800418c <_printf_i+0x28>
 800419e:	a101      	add	r1, pc, #4	@ (adr r1, 80041a4 <_printf_i+0x40>)
 80041a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	08004211 	.word	0x08004211
 80041ac:	0800418d 	.word	0x0800418d
 80041b0:	0800418d 	.word	0x0800418d
 80041b4:	0800418d 	.word	0x0800418d
 80041b8:	0800418d 	.word	0x0800418d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800418d 	.word	0x0800418d
 80041c4:	0800418d 	.word	0x0800418d
 80041c8:	0800418d 	.word	0x0800418d
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	08004311 	.word	0x08004311
 80041d4:	0800423b 	.word	0x0800423b
 80041d8:	080042cb 	.word	0x080042cb
 80041dc:	0800418d 	.word	0x0800418d
 80041e0:	0800418d 	.word	0x0800418d
 80041e4:	08004333 	.word	0x08004333
 80041e8:	0800418d 	.word	0x0800418d
 80041ec:	0800423b 	.word	0x0800423b
 80041f0:	0800418d 	.word	0x0800418d
 80041f4:	0800418d 	.word	0x0800418d
 80041f8:	080042d3 	.word	0x080042d3
 80041fc:	6833      	ldr	r3, [r6, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6032      	str	r2, [r6, #0]
 8004204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800420c:	2301      	movs	r3, #1
 800420e:	e09d      	b.n	800434c <_printf_i+0x1e8>
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	1d19      	adds	r1, r3, #4
 8004216:	6031      	str	r1, [r6, #0]
 8004218:	0606      	lsls	r6, r0, #24
 800421a:	d501      	bpl.n	8004220 <_printf_i+0xbc>
 800421c:	681d      	ldr	r5, [r3, #0]
 800421e:	e003      	b.n	8004228 <_printf_i+0xc4>
 8004220:	0645      	lsls	r5, r0, #25
 8004222:	d5fb      	bpl.n	800421c <_printf_i+0xb8>
 8004224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004228:	2d00      	cmp	r5, #0
 800422a:	da03      	bge.n	8004234 <_printf_i+0xd0>
 800422c:	232d      	movs	r3, #45	@ 0x2d
 800422e:	426d      	negs	r5, r5
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004234:	4859      	ldr	r0, [pc, #356]	@ (800439c <_printf_i+0x238>)
 8004236:	230a      	movs	r3, #10
 8004238:	e011      	b.n	800425e <_printf_i+0xfa>
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	6833      	ldr	r3, [r6, #0]
 800423e:	0608      	lsls	r0, r1, #24
 8004240:	f853 5b04 	ldr.w	r5, [r3], #4
 8004244:	d402      	bmi.n	800424c <_printf_i+0xe8>
 8004246:	0649      	lsls	r1, r1, #25
 8004248:	bf48      	it	mi
 800424a:	b2ad      	uxthmi	r5, r5
 800424c:	2f6f      	cmp	r7, #111	@ 0x6f
 800424e:	4853      	ldr	r0, [pc, #332]	@ (800439c <_printf_i+0x238>)
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	bf14      	ite	ne
 8004254:	230a      	movne	r3, #10
 8004256:	2308      	moveq	r3, #8
 8004258:	2100      	movs	r1, #0
 800425a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800425e:	6866      	ldr	r6, [r4, #4]
 8004260:	60a6      	str	r6, [r4, #8]
 8004262:	2e00      	cmp	r6, #0
 8004264:	bfa2      	ittt	ge
 8004266:	6821      	ldrge	r1, [r4, #0]
 8004268:	f021 0104 	bicge.w	r1, r1, #4
 800426c:	6021      	strge	r1, [r4, #0]
 800426e:	b90d      	cbnz	r5, 8004274 <_printf_i+0x110>
 8004270:	2e00      	cmp	r6, #0
 8004272:	d04b      	beq.n	800430c <_printf_i+0x1a8>
 8004274:	4616      	mov	r6, r2
 8004276:	fbb5 f1f3 	udiv	r1, r5, r3
 800427a:	fb03 5711 	mls	r7, r3, r1, r5
 800427e:	5dc7      	ldrb	r7, [r0, r7]
 8004280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004284:	462f      	mov	r7, r5
 8004286:	42bb      	cmp	r3, r7
 8004288:	460d      	mov	r5, r1
 800428a:	d9f4      	bls.n	8004276 <_printf_i+0x112>
 800428c:	2b08      	cmp	r3, #8
 800428e:	d10b      	bne.n	80042a8 <_printf_i+0x144>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	07df      	lsls	r7, r3, #31
 8004294:	d508      	bpl.n	80042a8 <_printf_i+0x144>
 8004296:	6923      	ldr	r3, [r4, #16]
 8004298:	6861      	ldr	r1, [r4, #4]
 800429a:	4299      	cmp	r1, r3
 800429c:	bfde      	ittt	le
 800429e:	2330      	movle	r3, #48	@ 0x30
 80042a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042a8:	1b92      	subs	r2, r2, r6
 80042aa:	6122      	str	r2, [r4, #16]
 80042ac:	f8cd a000 	str.w	sl, [sp]
 80042b0:	464b      	mov	r3, r9
 80042b2:	aa03      	add	r2, sp, #12
 80042b4:	4621      	mov	r1, r4
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7ff fee6 	bl	8004088 <_printf_common>
 80042bc:	3001      	adds	r0, #1
 80042be:	d14a      	bne.n	8004356 <_printf_i+0x1f2>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	b004      	add	sp, #16
 80042c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	f043 0320 	orr.w	r3, r3, #32
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	4833      	ldr	r0, [pc, #204]	@ (80043a0 <_printf_i+0x23c>)
 80042d4:	2778      	movs	r7, #120	@ 0x78
 80042d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	6831      	ldr	r1, [r6, #0]
 80042de:	061f      	lsls	r7, r3, #24
 80042e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80042e4:	d402      	bmi.n	80042ec <_printf_i+0x188>
 80042e6:	065f      	lsls	r7, r3, #25
 80042e8:	bf48      	it	mi
 80042ea:	b2ad      	uxthmi	r5, r5
 80042ec:	6031      	str	r1, [r6, #0]
 80042ee:	07d9      	lsls	r1, r3, #31
 80042f0:	bf44      	itt	mi
 80042f2:	f043 0320 	orrmi.w	r3, r3, #32
 80042f6:	6023      	strmi	r3, [r4, #0]
 80042f8:	b11d      	cbz	r5, 8004302 <_printf_i+0x19e>
 80042fa:	2310      	movs	r3, #16
 80042fc:	e7ac      	b.n	8004258 <_printf_i+0xf4>
 80042fe:	4827      	ldr	r0, [pc, #156]	@ (800439c <_printf_i+0x238>)
 8004300:	e7e9      	b.n	80042d6 <_printf_i+0x172>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	f023 0320 	bic.w	r3, r3, #32
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	e7f6      	b.n	80042fa <_printf_i+0x196>
 800430c:	4616      	mov	r6, r2
 800430e:	e7bd      	b.n	800428c <_printf_i+0x128>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	6825      	ldr	r5, [r4, #0]
 8004314:	6961      	ldr	r1, [r4, #20]
 8004316:	1d18      	adds	r0, r3, #4
 8004318:	6030      	str	r0, [r6, #0]
 800431a:	062e      	lsls	r6, r5, #24
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	d501      	bpl.n	8004324 <_printf_i+0x1c0>
 8004320:	6019      	str	r1, [r3, #0]
 8004322:	e002      	b.n	800432a <_printf_i+0x1c6>
 8004324:	0668      	lsls	r0, r5, #25
 8004326:	d5fb      	bpl.n	8004320 <_printf_i+0x1bc>
 8004328:	8019      	strh	r1, [r3, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	4616      	mov	r6, r2
 8004330:	e7bc      	b.n	80042ac <_printf_i+0x148>
 8004332:	6833      	ldr	r3, [r6, #0]
 8004334:	1d1a      	adds	r2, r3, #4
 8004336:	6032      	str	r2, [r6, #0]
 8004338:	681e      	ldr	r6, [r3, #0]
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	2100      	movs	r1, #0
 800433e:	4630      	mov	r0, r6
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	b108      	cbz	r0, 800434a <_printf_i+0x1e6>
 8004346:	1b80      	subs	r0, r0, r6
 8004348:	6060      	str	r0, [r4, #4]
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	2300      	movs	r3, #0
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004354:	e7aa      	b.n	80042ac <_printf_i+0x148>
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	4632      	mov	r2, r6
 800435a:	4649      	mov	r1, r9
 800435c:	4640      	mov	r0, r8
 800435e:	47d0      	blx	sl
 8004360:	3001      	adds	r0, #1
 8004362:	d0ad      	beq.n	80042c0 <_printf_i+0x15c>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	079b      	lsls	r3, r3, #30
 8004368:	d413      	bmi.n	8004392 <_printf_i+0x22e>
 800436a:	68e0      	ldr	r0, [r4, #12]
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	4298      	cmp	r0, r3
 8004370:	bfb8      	it	lt
 8004372:	4618      	movlt	r0, r3
 8004374:	e7a6      	b.n	80042c4 <_printf_i+0x160>
 8004376:	2301      	movs	r3, #1
 8004378:	4632      	mov	r2, r6
 800437a:	4649      	mov	r1, r9
 800437c:	4640      	mov	r0, r8
 800437e:	47d0      	blx	sl
 8004380:	3001      	adds	r0, #1
 8004382:	d09d      	beq.n	80042c0 <_printf_i+0x15c>
 8004384:	3501      	adds	r5, #1
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	9903      	ldr	r1, [sp, #12]
 800438a:	1a5b      	subs	r3, r3, r1
 800438c:	42ab      	cmp	r3, r5
 800438e:	dcf2      	bgt.n	8004376 <_printf_i+0x212>
 8004390:	e7eb      	b.n	800436a <_printf_i+0x206>
 8004392:	2500      	movs	r5, #0
 8004394:	f104 0619 	add.w	r6, r4, #25
 8004398:	e7f5      	b.n	8004386 <_printf_i+0x222>
 800439a:	bf00      	nop
 800439c:	080047e1 	.word	0x080047e1
 80043a0:	080047f2 	.word	0x080047f2

080043a4 <__sflush_r>:
 80043a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ac:	0716      	lsls	r6, r2, #28
 80043ae:	4605      	mov	r5, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	d454      	bmi.n	800445e <__sflush_r+0xba>
 80043b4:	684b      	ldr	r3, [r1, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dc02      	bgt.n	80043c0 <__sflush_r+0x1c>
 80043ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	dd48      	ble.n	8004452 <__sflush_r+0xae>
 80043c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	d045      	beq.n	8004452 <__sflush_r+0xae>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043cc:	682f      	ldr	r7, [r5, #0]
 80043ce:	6a21      	ldr	r1, [r4, #32]
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	d030      	beq.n	8004436 <__sflush_r+0x92>
 80043d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	0759      	lsls	r1, r3, #29
 80043da:	d505      	bpl.n	80043e8 <__sflush_r+0x44>
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043e2:	b10b      	cbz	r3, 80043e8 <__sflush_r+0x44>
 80043e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043ec:	6a21      	ldr	r1, [r4, #32]
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b0      	blx	r6
 80043f2:	1c43      	adds	r3, r0, #1
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	d106      	bne.n	8004406 <__sflush_r+0x62>
 80043f8:	6829      	ldr	r1, [r5, #0]
 80043fa:	291d      	cmp	r1, #29
 80043fc:	d82b      	bhi.n	8004456 <__sflush_r+0xb2>
 80043fe:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <__sflush_r+0x104>)
 8004400:	410a      	asrs	r2, r1
 8004402:	07d6      	lsls	r6, r2, #31
 8004404:	d427      	bmi.n	8004456 <__sflush_r+0xb2>
 8004406:	2200      	movs	r2, #0
 8004408:	6062      	str	r2, [r4, #4]
 800440a:	04d9      	lsls	r1, r3, #19
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	d504      	bpl.n	800441c <__sflush_r+0x78>
 8004412:	1c42      	adds	r2, r0, #1
 8004414:	d101      	bne.n	800441a <__sflush_r+0x76>
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	b903      	cbnz	r3, 800441c <__sflush_r+0x78>
 800441a:	6560      	str	r0, [r4, #84]	@ 0x54
 800441c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800441e:	602f      	str	r7, [r5, #0]
 8004420:	b1b9      	cbz	r1, 8004452 <__sflush_r+0xae>
 8004422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004426:	4299      	cmp	r1, r3
 8004428:	d002      	beq.n	8004430 <__sflush_r+0x8c>
 800442a:	4628      	mov	r0, r5
 800442c:	f7ff fbf2 	bl	8003c14 <_free_r>
 8004430:	2300      	movs	r3, #0
 8004432:	6363      	str	r3, [r4, #52]	@ 0x34
 8004434:	e00d      	b.n	8004452 <__sflush_r+0xae>
 8004436:	2301      	movs	r3, #1
 8004438:	4628      	mov	r0, r5
 800443a:	47b0      	blx	r6
 800443c:	4602      	mov	r2, r0
 800443e:	1c50      	adds	r0, r2, #1
 8004440:	d1c9      	bne.n	80043d6 <__sflush_r+0x32>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0c6      	beq.n	80043d6 <__sflush_r+0x32>
 8004448:	2b1d      	cmp	r3, #29
 800444a:	d001      	beq.n	8004450 <__sflush_r+0xac>
 800444c:	2b16      	cmp	r3, #22
 800444e:	d11e      	bne.n	800448e <__sflush_r+0xea>
 8004450:	602f      	str	r7, [r5, #0]
 8004452:	2000      	movs	r0, #0
 8004454:	e022      	b.n	800449c <__sflush_r+0xf8>
 8004456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800445a:	b21b      	sxth	r3, r3
 800445c:	e01b      	b.n	8004496 <__sflush_r+0xf2>
 800445e:	690f      	ldr	r7, [r1, #16]
 8004460:	2f00      	cmp	r7, #0
 8004462:	d0f6      	beq.n	8004452 <__sflush_r+0xae>
 8004464:	0793      	lsls	r3, r2, #30
 8004466:	680e      	ldr	r6, [r1, #0]
 8004468:	bf08      	it	eq
 800446a:	694b      	ldreq	r3, [r1, #20]
 800446c:	600f      	str	r7, [r1, #0]
 800446e:	bf18      	it	ne
 8004470:	2300      	movne	r3, #0
 8004472:	eba6 0807 	sub.w	r8, r6, r7
 8004476:	608b      	str	r3, [r1, #8]
 8004478:	f1b8 0f00 	cmp.w	r8, #0
 800447c:	dde9      	ble.n	8004452 <__sflush_r+0xae>
 800447e:	6a21      	ldr	r1, [r4, #32]
 8004480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004482:	4643      	mov	r3, r8
 8004484:	463a      	mov	r2, r7
 8004486:	4628      	mov	r0, r5
 8004488:	47b0      	blx	r6
 800448a:	2800      	cmp	r0, #0
 800448c:	dc08      	bgt.n	80044a0 <__sflush_r+0xfc>
 800448e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a0:	4407      	add	r7, r0
 80044a2:	eba8 0800 	sub.w	r8, r8, r0
 80044a6:	e7e7      	b.n	8004478 <__sflush_r+0xd4>
 80044a8:	dfbffffe 	.word	0xdfbffffe

080044ac <_fflush_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4605      	mov	r5, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	b913      	cbnz	r3, 80044bc <_fflush_r+0x10>
 80044b6:	2500      	movs	r5, #0
 80044b8:	4628      	mov	r0, r5
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	b118      	cbz	r0, 80044c6 <_fflush_r+0x1a>
 80044be:	6a03      	ldr	r3, [r0, #32]
 80044c0:	b90b      	cbnz	r3, 80044c6 <_fflush_r+0x1a>
 80044c2:	f7ff fa9f 	bl	8003a04 <__sinit>
 80044c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f3      	beq.n	80044b6 <_fflush_r+0xa>
 80044ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044d0:	07d0      	lsls	r0, r2, #31
 80044d2:	d404      	bmi.n	80044de <_fflush_r+0x32>
 80044d4:	0599      	lsls	r1, r3, #22
 80044d6:	d402      	bmi.n	80044de <_fflush_r+0x32>
 80044d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044da:	f7ff fb98 	bl	8003c0e <__retarget_lock_acquire_recursive>
 80044de:	4628      	mov	r0, r5
 80044e0:	4621      	mov	r1, r4
 80044e2:	f7ff ff5f 	bl	80043a4 <__sflush_r>
 80044e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044e8:	07da      	lsls	r2, r3, #31
 80044ea:	4605      	mov	r5, r0
 80044ec:	d4e4      	bmi.n	80044b8 <_fflush_r+0xc>
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	059b      	lsls	r3, r3, #22
 80044f2:	d4e1      	bmi.n	80044b8 <_fflush_r+0xc>
 80044f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044f6:	f7ff fb8b 	bl	8003c10 <__retarget_lock_release_recursive>
 80044fa:	e7dd      	b.n	80044b8 <_fflush_r+0xc>

080044fc <__swbuf_r>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	460e      	mov	r6, r1
 8004500:	4614      	mov	r4, r2
 8004502:	4605      	mov	r5, r0
 8004504:	b118      	cbz	r0, 800450e <__swbuf_r+0x12>
 8004506:	6a03      	ldr	r3, [r0, #32]
 8004508:	b90b      	cbnz	r3, 800450e <__swbuf_r+0x12>
 800450a:	f7ff fa7b 	bl	8003a04 <__sinit>
 800450e:	69a3      	ldr	r3, [r4, #24]
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	071a      	lsls	r2, r3, #28
 8004516:	d501      	bpl.n	800451c <__swbuf_r+0x20>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	b943      	cbnz	r3, 800452e <__swbuf_r+0x32>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f82a 	bl	8004578 <__swsetup_r>
 8004524:	b118      	cbz	r0, 800452e <__swbuf_r+0x32>
 8004526:	f04f 37ff 	mov.w	r7, #4294967295
 800452a:	4638      	mov	r0, r7
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	6922      	ldr	r2, [r4, #16]
 8004532:	1a98      	subs	r0, r3, r2
 8004534:	6963      	ldr	r3, [r4, #20]
 8004536:	b2f6      	uxtb	r6, r6
 8004538:	4283      	cmp	r3, r0
 800453a:	4637      	mov	r7, r6
 800453c:	dc05      	bgt.n	800454a <__swbuf_r+0x4e>
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f7ff ffb3 	bl	80044ac <_fflush_r>
 8004546:	2800      	cmp	r0, #0
 8004548:	d1ed      	bne.n	8004526 <__swbuf_r+0x2a>
 800454a:	68a3      	ldr	r3, [r4, #8]
 800454c:	3b01      	subs	r3, #1
 800454e:	60a3      	str	r3, [r4, #8]
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	701e      	strb	r6, [r3, #0]
 8004558:	6962      	ldr	r2, [r4, #20]
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	429a      	cmp	r2, r3
 800455e:	d004      	beq.n	800456a <__swbuf_r+0x6e>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	07db      	lsls	r3, r3, #31
 8004564:	d5e1      	bpl.n	800452a <__swbuf_r+0x2e>
 8004566:	2e0a      	cmp	r6, #10
 8004568:	d1df      	bne.n	800452a <__swbuf_r+0x2e>
 800456a:	4621      	mov	r1, r4
 800456c:	4628      	mov	r0, r5
 800456e:	f7ff ff9d 	bl	80044ac <_fflush_r>
 8004572:	2800      	cmp	r0, #0
 8004574:	d0d9      	beq.n	800452a <__swbuf_r+0x2e>
 8004576:	e7d6      	b.n	8004526 <__swbuf_r+0x2a>

08004578 <__swsetup_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <__swsetup_r+0xa8>)
 800457c:	4605      	mov	r5, r0
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	460c      	mov	r4, r1
 8004582:	b118      	cbz	r0, 800458c <__swsetup_r+0x14>
 8004584:	6a03      	ldr	r3, [r0, #32]
 8004586:	b90b      	cbnz	r3, 800458c <__swsetup_r+0x14>
 8004588:	f7ff fa3c 	bl	8003a04 <__sinit>
 800458c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004590:	0719      	lsls	r1, r3, #28
 8004592:	d422      	bmi.n	80045da <__swsetup_r+0x62>
 8004594:	06da      	lsls	r2, r3, #27
 8004596:	d407      	bmi.n	80045a8 <__swsetup_r+0x30>
 8004598:	2209      	movs	r2, #9
 800459a:	602a      	str	r2, [r5, #0]
 800459c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	e033      	b.n	8004610 <__swsetup_r+0x98>
 80045a8:	0758      	lsls	r0, r3, #29
 80045aa:	d512      	bpl.n	80045d2 <__swsetup_r+0x5a>
 80045ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045ae:	b141      	cbz	r1, 80045c2 <__swsetup_r+0x4a>
 80045b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d002      	beq.n	80045be <__swsetup_r+0x46>
 80045b8:	4628      	mov	r0, r5
 80045ba:	f7ff fb2b 	bl	8003c14 <_free_r>
 80045be:	2300      	movs	r3, #0
 80045c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b94b      	cbnz	r3, 80045f2 <__swsetup_r+0x7a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d003      	beq.n	80045f2 <__swsetup_r+0x7a>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f84f 	bl	8004690 <__smakebuf_r>
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	f013 0201 	ands.w	r2, r3, #1
 80045fa:	d00a      	beq.n	8004612 <__swsetup_r+0x9a>
 80045fc:	2200      	movs	r2, #0
 80045fe:	60a2      	str	r2, [r4, #8]
 8004600:	6962      	ldr	r2, [r4, #20]
 8004602:	4252      	negs	r2, r2
 8004604:	61a2      	str	r2, [r4, #24]
 8004606:	6922      	ldr	r2, [r4, #16]
 8004608:	b942      	cbnz	r2, 800461c <__swsetup_r+0xa4>
 800460a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800460e:	d1c5      	bne.n	800459c <__swsetup_r+0x24>
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	0799      	lsls	r1, r3, #30
 8004614:	bf58      	it	pl
 8004616:	6962      	ldrpl	r2, [r4, #20]
 8004618:	60a2      	str	r2, [r4, #8]
 800461a:	e7f4      	b.n	8004606 <__swsetup_r+0x8e>
 800461c:	2000      	movs	r0, #0
 800461e:	e7f7      	b.n	8004610 <__swsetup_r+0x98>
 8004620:	2000001c 	.word	0x2000001c

08004624 <_sbrk_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d06      	ldr	r5, [pc, #24]	@ (8004640 <_sbrk_r+0x1c>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc fcd6 	bl	8000fe0 <_sbrk>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_sbrk_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_sbrk_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	2000028c 	.word	0x2000028c

08004644 <__swhatbuf_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	2900      	cmp	r1, #0
 800464e:	b096      	sub	sp, #88	@ 0x58
 8004650:	4615      	mov	r5, r2
 8004652:	461e      	mov	r6, r3
 8004654:	da0d      	bge.n	8004672 <__swhatbuf_r+0x2e>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	bf14      	ite	ne
 8004662:	2340      	movne	r3, #64	@ 0x40
 8004664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004668:	2000      	movs	r0, #0
 800466a:	6031      	str	r1, [r6, #0]
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	b016      	add	sp, #88	@ 0x58
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	466a      	mov	r2, sp
 8004674:	f000 f848 	bl	8004708 <_fstat_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	dbec      	blt.n	8004656 <__swhatbuf_r+0x12>
 800467c:	9901      	ldr	r1, [sp, #4]
 800467e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004686:	4259      	negs	r1, r3
 8004688:	4159      	adcs	r1, r3
 800468a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800468e:	e7eb      	b.n	8004668 <__swhatbuf_r+0x24>

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b003      	add	sp, #12
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ac:	ab01      	add	r3, sp, #4
 80046ae:	466a      	mov	r2, sp
 80046b0:	f7ff ffc8 	bl	8004644 <__swhatbuf_r>
 80046b4:	9f00      	ldr	r7, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4639      	mov	r1, r7
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff fb16 	bl	8003cec <_malloc_r>
 80046c0:	b948      	cbnz	r0, 80046d6 <__smakebuf_r+0x46>
 80046c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c6:	059a      	lsls	r2, r3, #22
 80046c8:	d4ee      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	f043 0302 	orr.w	r3, r3, #2
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	e7e2      	b.n	800469c <__smakebuf_r+0xc>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	6020      	str	r0, [r4, #0]
 80046da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046e6:	b15b      	cbz	r3, 8004700 <__smakebuf_r+0x70>
 80046e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f81d 	bl	800472c <_isatty_r>
 80046f2:	b128      	cbz	r0, 8004700 <__smakebuf_r+0x70>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	431d      	orrs	r5, r3
 8004704:	81a5      	strh	r5, [r4, #12]
 8004706:	e7cf      	b.n	80046a8 <__smakebuf_r+0x18>

08004708 <_fstat_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d07      	ldr	r5, [pc, #28]	@ (8004728 <_fstat_r+0x20>)
 800470c:	2300      	movs	r3, #0
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	f7fc fc3a 	bl	8000f8e <_fstat>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d102      	bne.n	8004724 <_fstat_r+0x1c>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b103      	cbz	r3, 8004724 <_fstat_r+0x1c>
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	2000028c 	.word	0x2000028c

0800472c <_isatty_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_isatty_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc fc39 	bl	8000fae <_isatty>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_isatty_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_isatty_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	2000028c 	.word	0x2000028c

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
